#!/usr/bin/env python3
"""
JarvisFi - Simple Launcher
Launch JarvisFi with error handling and fallbacks
"""

import os
import sys
import subprocess
import logging
from pathlib import Path

# Setup logging
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

def print_banner():
    """Print JarvisFi banner"""
    print("""
    ‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
    ‚ïë                                                              ‚ïë
    ‚ïë        ü§ñ JarvisFi - Your AI-Powered Financial Genius       ‚ïë
    ‚ïë                    Comprehensive Edition v2.0               ‚ïë
    ‚ïë                                                              ‚ïë
    ‚ïë  ‚ú® Features Available:                                      ‚ïë
    ‚ïë  ‚Ä¢ üåç Multi-language Support (EN, TA, HI, TE)              ‚ïë
    ‚ïë  ‚Ä¢ üí¨ AI Chat Interface                                     ‚ïë
    ‚ïë  ‚Ä¢ üìä Financial Dashboard                                   ‚ïë
    ‚ïë  ‚Ä¢ üßÆ 15+ Financial Calculators                            ‚ïë
    ‚ïë  ‚Ä¢ üé§ Voice Interface Framework                             ‚ïë
    ‚ïë  ‚Ä¢ üë®‚Äçüåæ Farmer Tools                                        ‚ïë
    ‚ïë  ‚Ä¢ üí≥ Credit Score Tracking                                ‚ïë
    ‚ïë  ‚Ä¢ üìà Investment Portfolio                                  ‚ïë
    ‚ïë  ‚Ä¢ üõ°Ô∏è Security Center                                       ‚ïë
    ‚ïë  ‚Ä¢ üéÆ Gamification System                                   ‚ïë
    ‚ïë                                                              ‚ïë
    ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù
    """)

def install_requirements():
    """Install basic requirements"""
    requirements = [
        'streamlit>=1.28.0',
        'pandas>=2.0.0',
        'numpy>=1.24.0',
        'plotly>=5.17.0',
        'python-dateutil>=2.8.0'
    ]
    
    try:
        logger.info("üì¶ Installing/updating requirements...")
        subprocess.run([
            sys.executable, '-m', 'pip', 'install', '--upgrade'
        ] + requirements, check=True, capture_output=True, text=True)
        logger.info("‚úÖ Requirements installed successfully")
        return True
    except subprocess.CalledProcessError as e:
        logger.error(f"‚ùå Failed to install requirements: {e}")
        logger.info("Continuing with existing packages...")
        return False

def find_app():
    """Find the best available app to run"""
    current_dir = Path(__file__).parent
    
    # Priority order of apps to try
    apps = [
        current_dir / 'frontend' / 'comprehensive_app.py',
        current_dir / 'frontend' / 'clean_app.py',
        current_dir / 'frontend' / 'app.py'
    ]
    
    for app in apps:
        if app.exists():
            logger.info(f"üì± Found app: {app.name}")
            return app
    
    logger.error("‚ùå No JarvisFi application found!")
    return None

def run_streamlit_app(app_path, port=8501):
    """Run the Streamlit application"""
    try:
        logger.info(f"üöÄ Starting JarvisFi on port {port}...")
        logger.info(f"üåê Open your browser to: http://localhost:{port}")
        logger.info("‚èπÔ∏è Press Ctrl+C to stop")
        
        # Basic streamlit command
        cmd = [
            sys.executable, '-m', 'streamlit', 'run',
            str(app_path),
            '--server.port', str(port),
            '--server.address', '0.0.0.0',
            '--browser.gatherUsageStats', 'false',
            '--server.headless', 'true'
        ]
        
        # Run the application
        process = subprocess.Popen(cmd, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
        
        # Wait a bit to see if it starts successfully
        import time
        time.sleep(3)
        
        if process.poll() is None:
            logger.info("‚úÖ JarvisFi started successfully!")
            logger.info("üì± Access the application in your web browser")
            
            # Wait for the process to complete
            try:
                process.wait()
            except KeyboardInterrupt:
                logger.info("‚èπÔ∏è Stopping JarvisFi...")
                process.terminate()
                process.wait()
                logger.info("‚úÖ JarvisFi stopped successfully")
            
            return True
        else:
            stdout, stderr = process.communicate()
            logger.error(f"‚ùå Failed to start JarvisFi")
            if stderr:
                logger.error(f"Error: {stderr}")
            return False
            
    except FileNotFoundError:
        logger.error("‚ùå Streamlit not found. Installing...")
        try:
            subprocess.run([sys.executable, '-m', 'pip', 'install', 'streamlit'], check=True)
            logger.info("‚úÖ Streamlit installed. Please run the script again.")
            return False
        except subprocess.CalledProcessError:
            logger.error("‚ùå Failed to install Streamlit")
            return False
    except Exception as e:
        logger.error(f"‚ùå Unexpected error: {e}")
        return False

def main():
    """Main function"""
    print_banner()
    
    try:
        # Install/update requirements
        install_requirements()
        
        # Find the app to run
        app_path = find_app()
        if not app_path:
            logger.error("‚ùå No application found to run")
            return 1
        
        # Run the application
        success = run_streamlit_app(app_path)
        
        if success:
            logger.info("‚úÖ JarvisFi session completed")
            return 0
        else:
            logger.error("‚ùå Failed to start JarvisFi")
            return 1
            
    except KeyboardInterrupt:
        logger.info("‚èπÔ∏è Startup interrupted by user")
        return 0
    except Exception as e:
        logger.error(f"‚ùå Startup failed: {e}")
        return 1

if __name__ == '__main__':
    exit_code = main()
    sys.exit(exit_code)
