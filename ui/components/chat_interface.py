"""
JarvisFi - Chat Interface Component
Advanced chat interface with AI responses, voice support, and multilingual capabilities
"""

import streamlit as st
import time
import asyncio
from datetime import datetime
from typing import Dict, Any, List, Optional
import json

def render_chat_interface():
    """Render the main chat interface"""
    current_language = st.session_state.user_profile['basic_info']['language']
    
    # Chat header
    if current_language == 'en':
        st.markdown("### ЁЯТм Chat with JarvisFi")
        st.markdown("Ask me anything about personal finance, investments, budgeting, and more!")
    elif current_language == 'ta':
        st.markdown("### ЁЯТм JarvisFi роЙроЯройрпН роЕро░роЯрпНроЯрпИропроЯро┐роХрпНроХро╡рпБроорпН")
        st.markdown("родройро┐рокрпНрокроЯрпНроЯ роиро┐родро┐, роорпБродро▓рпАроЯрпБроХро│рпН, рокроЯрпНроЬрпЖроЯрпН рооро▒рпНро▒рпБроорпН рокро▓ро╡ро▒рпНро▒рпИрокрпН рокро▒рпНро▒ро┐ роОройрпНройро┐роЯроорпН роОродрпИропрпБроорпН роХрпЗро│рпБроЩрпНроХро│рпН!")
    elif current_language == 'hi':
        st.markdown("### ЁЯТм JarvisFi рдХреЗ рд╕рд╛рде рдЪреИрдЯ рдХрд░реЗрдВ")
        st.markdown("рд╡реНрдпрдХреНрддрд┐рдЧрдд рд╡рд┐рддреНрдд, рдирд┐рд╡реЗрд╢, рдмрдЬрдЯ рдФрд░ рдЕрдзрд┐рдХ рдХреЗ рдмрд╛рд░реЗ рдореЗрдВ рдореБрдЭрд╕реЗ рдХреБрдЫ рднреА рдкреВрдЫреЗрдВ!")
    
    # Chat container
    chat_container = st.container()
    
    with chat_container:
        # Display chat history
        display_chat_history()
        
        # Chat input area
        render_chat_input()
        
        # Quick action buttons
        render_quick_actions()
        
        # Voice controls
        render_voice_controls()


def display_chat_history():
    """Display chat message history"""
    if not st.session_state.chat_history:
        # Show welcome message
        show_welcome_message()
    else:
        # Display all messages
        for message in st.session_state.chat_history:
            display_message(message)


def show_welcome_message():
    """Show welcome message for new users"""
    current_language = st.session_state.user_profile['basic_info']['language']
    user_type = st.session_state.user_profile['basic_info']['user_type']
    user_name = st.session_state.user_profile['basic_info']['name']
    
    # Personalized welcome based on user type and language
    welcome_messages = {
        'en': {
            'beginner': f"ЁЯСЛ Hello {user_name or 'there'}! I'm JarvisFi, your AI financial genius. I'm here to help you start your financial journey. You can ask me about:\n\nЁЯТ░ **Basic budgeting tips**\nЁЯУК **Simple investment options**\nЁЯПж **Savings strategies**\nЁЯУ▒ **Financial apps and tools**\n\nWhat would you like to learn about first?",
            'intermediate': f"ЁЯСЛ Welcome back {user_name or 'there'}! I'm JarvisFi, ready to help you optimize your finances. I can assist with:\n\nЁЯУИ **Investment portfolio analysis**\nЁЯТ╝ **Tax planning strategies**\nЁЯОп **Goal-based financial planning**\nЁЯУК **Market insights and trends**\n\nWhat financial topic interests you today?",
            'professional': f"ЁЯСЛ Hello {user_name or 'there'}! I'm JarvisFi, your advanced financial advisor. I can help with:\n\nЁЯПв **Corporate finance strategies**\nЁЯТ╣ **Advanced investment analysis**\nЁЯУЛ **Risk management**\nЁЯМР **International finance**\n\nHow can I assist you today?",
            'student': f"ЁЯСЛ Hi {user_name or 'there'}! I'm JarvisFi, here to help you build smart money habits. Let's explore:\n\nЁЯОУ **Student budgeting**\nЁЯТ│ **Building credit history**\nЁЯУЪ **Education loan management**\nЁЯТ░ **Part-time income optimization**\n\nWhat would you like to know?",
            'farmer': f"ЁЯСЛ Namaste {user_name or 'there'}! I'm JarvisFi, your agricultural finance expert. I can help with:\n\nЁЯМ╛ **Crop loan guidance**\nЁЯУК **MSP and market prices**\nЁЯПЫя╕П **Government subsidies**\nЁЯМзя╕П **Weather-based planning**\n\nHow can I support your farming business?",
            'senior_citizen': f"ЁЯСЛ Hello {user_name or 'there'}! I'm JarvisFi, here to help with your retirement planning. I can assist with:\n\nЁЯПе **Healthcare financial planning**\nЁЯТ░ **Pension optimization**\nЁЯПа **Estate planning basics**\nЁЯУК **Safe investment options**\n\nWhat would you like to discuss?"
        },
        'ta': {
            'beginner': f"ЁЯСЛ ро╡рогроХрпНроХроорпН {user_name or 'роирогрпНрокро░рпЗ'}! роиро╛ройрпН JarvisFi, роЙроЩрпНроХро│рпН AI роиро┐родро┐ роорпЗродрпИ. роЙроЩрпНроХро│рпН роиро┐родро┐ рокропрогродрпНродрпИродрпН родрпКроЯроЩрпНроХ роЙродро╡ роиро╛ройрпН роЗроЩрпНроХрпЗ роЗро░рпБроХрпНроХро┐ро▒рпЗройрпН. роирпАроЩрпНроХро│рпН роОройрпНройро┐роЯроорпН роХрпЗроЯрпНроХро▓ро╛роорпН:\n\nЁЯТ░ **роЕроЯро┐рокрпНрокроЯрпИ рокроЯрпНроЬрпЖроЯрпН роХрпБро▒ро┐рокрпНрокрпБроХро│рпН**\nЁЯУК **роОро│ро┐роп роорпБродро▓рпАроЯрпНроЯрпБ ро╡ро┐ро░рпБрокрпНрокроЩрпНроХро│рпН**\nЁЯПж **роЪрпЗрооро┐рокрпНрокрпБ роЙродрпНродро┐роХро│рпН**\nЁЯУ▒ **роиро┐родро┐ рокропройрпНрокро╛роЯрпБроХро│рпН рооро▒рпНро▒рпБроорпН роХро░рпБро╡ро┐роХро│рпН**\n\nроорпБродро▓ро┐ро▓рпН роОродрпИрокрпН рокро▒рпНро▒ро┐ роЕро▒ро┐роп ро╡ро┐ро░рпБроорпНрокрпБроХро┐ро▒рпАро░рпНроХро│рпН?",
            'intermediate': f"ЁЯСЛ роорпАрогрпНроЯрпБроорпН ро╡ро░ро╡рпЗро▒рпНроХро┐ро▒рпЛроорпН {user_name or 'роирогрпНрокро░рпЗ'}! роиро╛ройрпН JarvisFi, роЙроЩрпНроХро│рпН роиро┐родро┐ропрпИ роорпЗроорпНрокроЯрпБродрпНрод роЙродро╡ родропро╛ро░ро╛роХ роЗро░рпБроХрпНроХро┐ро▒рпЗройрпН. роиро╛ройрпН роЙродро╡ роорпБроЯро┐ропрпБроорпН:\n\nЁЯУИ **роорпБродро▓рпАроЯрпНроЯрпБ рокрпЛро░рпНроЯрпНроГрокрпЛро▓ро┐ропрпЛ рокроХрпБрокрпНрокро╛ропрпНро╡рпБ**\nЁЯТ╝ **ро╡ро░ро┐ родро┐роЯрпНроЯрооро┐роЯро▓рпН роЙродрпНродро┐роХро│рпН**\nЁЯОп **роЗро▓роХрпНроХрпБ роЕроЯро┐рокрпНрокроЯрпИропро┐ро▓ро╛рой роиро┐родро┐ родро┐роЯрпНроЯрооро┐роЯро▓рпН**\nЁЯУК **роЪроирпНродрпИ роирпБрогрпНрогро▒ро┐ро╡рпБ рооро▒рпНро▒рпБроорпН рокрпЛроХрпНроХрпБроХро│рпН**\n\nроЗройрпНро▒рпБ роОроирпНрод роиро┐родро┐ родро▓рпИрокрпНрокрпБ роЙроЩрпНроХро│рпБроХрпНроХрпБ роЖро░рпНро╡рооро╛роХ роЙро│рпНро│родрпБ?",
            'student': f"ЁЯСЛ ро╡рогроХрпНроХроорпН {user_name or 'роирогрпНрокро░рпЗ'}! роиро╛ройрпН JarvisFi, рокрпБродрпНродро┐роЪро╛ро▓ро┐родрпНродройрооро╛рой рокрог рокро┤роХрпНроХроЩрпНроХро│рпИ роЙро░рпБро╡ро╛роХрпНроХ роЙродро╡ роЗроЩрпНроХрпЗ роЗро░рпБроХрпНроХро┐ро▒рпЗройрпН. роЖро░ро╛ропрпНро╡рпЛроорпН:\n\nЁЯОУ **рооро╛рогро╡ро░рпН рокроЯрпНроЬрпЖроЯрпН**\nЁЯТ│ **роХро┐ро░рпЖроЯро┐роЯрпН ро╡ро░ро▓ро╛ро▒рпНро▒рпИ роЙро░рпБро╡ро╛роХрпНроХрпБродро▓рпН**\nЁЯУЪ **роХро▓рпНро╡ро┐роХрпН роХроЯройрпН роорпЗро▓ро╛рогрпНроорпИ**\nЁЯТ░ **рокроХрпБродро┐ роирпЗро░ ро╡ро░рпБрооро╛рой роорпЗроорпНрокро╛роЯрпБ**\n\nроирпАроЩрпНроХро│рпН роОройрпНрой родрпЖро░ро┐роирпНродрпБ роХрпКро│рпНро│ ро╡ро┐ро░рпБроорпНрокрпБроХро┐ро▒рпАро░рпНроХро│рпН?"
        },
        'hi': {
            'beginner': f"ЁЯСЛ рдирдорд╕реНрддреЗ {user_name or 'рджреЛрд╕реНрдд'}! рдореИрдВ JarvisFi рд╣реВрдВ, рдЖрдкрдХрд╛ AI рд╡рд┐рддреНрддреАрдп рдкреНрд░рддрд┐рднрд╛ред рдореИрдВ рдЖрдкрдХреА рд╡рд┐рддреНрддреАрдп рдпрд╛рддреНрд░рд╛ рд╢реБрд░реВ рдХрд░рдиреЗ рдореЗрдВ рдорджрдж рдХреЗ рд▓рд┐рдП рдпрд╣рд╛рдВ рд╣реВрдВред рдЖрдк рдореБрдЭрд╕реЗ рдкреВрдЫ рд╕рдХрддреЗ рд╣реИрдВ:\n\nЁЯТ░ **рдмреБрдирд┐рдпрд╛рджреА рдмрдЬрдЯ рдЯрд┐рдкреНрд╕**\nЁЯУК **рд╕рд░рд▓ рдирд┐рд╡реЗрд╢ рд╡рд┐рдХрд▓реНрдк**\nЁЯПж **рдмрдЪрдд рд░рдгрдиреАрддрд┐рдпрд╛рдВ**\nЁЯУ▒ **рд╡рд┐рддреНрддреАрдп рдРрдкреНрд╕ рдФрд░ рдЯреВрд▓реНрд╕**\n\nрдЖрдк рдкрд╣рд▓реЗ рдХрд┐рд╕ рдмрд╛рд░реЗ рдореЗрдВ рдЬрд╛рдирдирд╛ рдЪрд╛рд╣реЗрдВрдЧреЗ?",
            'student': f"ЁЯСЛ рдирдорд╕реНрддреЗ {user_name or 'рджреЛрд╕реНрдд'}! рдореИрдВ JarvisFi рд╣реВрдВ, рд╕реНрдорд╛рд░реНрдЯ рдкреИрд╕реЗ рдХреА рдЖрджрддреЗрдВ рдмрдирд╛рдиреЗ рдореЗрдВ рдЖрдкрдХреА рдорджрдж рдХреЗ рд▓рд┐рдП рдпрд╣рд╛рдВ рд╣реВрдВред рдЖрдЗрдП рдЬрд╛рдиреЗрдВ:\n\nЁЯОУ **рдЫрд╛рддреНрд░ рдмрдЬрдЯ**\nЁЯТ│ **рдХреНрд░реЗрдбрд┐рдЯ рд╣рд┐рд╕реНрдЯреНрд░реА рдмрдирд╛рдирд╛**\nЁЯУЪ **рд╢рд┐рдХреНрд╖рд╛ рдЛрдг рдкреНрд░рдмрдВрдзрди**\nЁЯТ░ **рдкрд╛рд░реНрдЯ-рдЯрд╛рдЗрдо рдЖрдп рдЕрдиреБрдХреВрд▓рди**\n\nрдЖрдк рдХреНрдпрд╛ рдЬрд╛рдирдирд╛ рдЪрд╛рд╣реЗрдВрдЧреЗ?"
        }
    }
    
    # Get appropriate welcome message
    lang_messages = welcome_messages.get(current_language, welcome_messages['en'])
    welcome_text = lang_messages.get(user_type, lang_messages.get('beginner', ''))
    
    # Display welcome message
    with st.chat_message("assistant", avatar="ЁЯдЦ"):
        st.markdown(welcome_text)
    
    # Add to chat history
    if not st.session_state.chat_history:
        st.session_state.chat_history.append({
            "role": "assistant",
            "content": welcome_text,
            "timestamp": datetime.now().isoformat(),
            "type": "welcome"
        })


def display_message(message: Dict[str, Any]):
    """Display a single chat message"""
    role = message.get("role", "user")
    content = message.get("content", "")
    timestamp = message.get("timestamp", "")
    message_type = message.get("type", "text")
    
    # Choose avatar
    avatar = "ЁЯдЦ" if role == "assistant" else "ЁЯСд"
    
    with st.chat_message(role, avatar=avatar):
        # Display content
        st.markdown(content)
        
        # Display additional info for assistant messages
        if role == "assistant" and message_type != "welcome":
            display_message_metadata(message)
        
        # Display timestamp
        if timestamp:
            try:
                dt = datetime.fromisoformat(timestamp.replace('Z', '+00:00'))
                time_str = dt.strftime("%H:%M")
                st.caption(f"тП░ {time_str}")
            except:
                pass


def display_message_metadata(message: Dict[str, Any]):
    """Display metadata for assistant messages"""
    metadata = message.get("metadata", {})
    
    if metadata:
        with st.expander("ЁЯУК Response Details", expanded=False):
            col1, col2, col3 = st.columns(3)
            
            with col1:
                confidence = metadata.get("confidence", 0.5)
                st.metric("Confidence", f"{confidence:.1%}")
            
            with col2:
                intent = metadata.get("intent", "general")
                st.metric("Intent", intent.title())
            
            with col3:
                sentiment = metadata.get("sentiment", {})
                sentiment_label = sentiment.get("label", "NEUTRAL")
                st.metric("Sentiment", sentiment_label)
            
            # Sources
            sources = metadata.get("sources", [])
            if sources:
                st.markdown("**Sources:**")
                for source in sources:
                    st.markdown(f"тАв {source}")


def render_chat_input():
    """Render chat input area"""
    current_language = st.session_state.user_profile['basic_info']['language']
    
    # Chat input
    placeholder_text = {
        'en': "Ask JarvisFi about budgets, investments, savings, taxes...",
        'ta': "рокроЯрпНроЬрпЖроЯрпН, роорпБродро▓рпАроЯрпБроХро│рпН, роЪрпЗрооро┐рокрпНрокрпБ, ро╡ро░ро┐роХро│рпН рокро▒рпНро▒ро┐ JarvisFi-ропро┐роЯроорпН роХрпЗро│рпБроЩрпНроХро│рпН...",
        'hi': "рдмрдЬрдЯ, рдирд┐рд╡реЗрд╢, рдмрдЪрдд, рдХрд░ рдХреЗ рдмрд╛рд░реЗ рдореЗрдВ JarvisFi рд╕реЗ рдкреВрдЫреЗрдВ..."
    }
    
    user_input = st.chat_input(
        placeholder_text.get(current_language, placeholder_text['en'])
    )
    
    if user_input:
        process_user_message(user_input)


def process_user_message(user_input: str):
    """Process user message and generate AI response"""
    current_language = st.session_state.user_profile['basic_info']['language']
    
    # Add user message to history
    user_message = {
        "role": "user",
        "content": user_input,
        "timestamp": datetime.now().isoformat(),
        "type": "text"
    }
    st.session_state.chat_history.append(user_message)
    
    # Display user message
    with st.chat_message("user", avatar="ЁЯСд"):
        st.markdown(user_input)
    
    # Generate AI response
    with st.chat_message("assistant", avatar="ЁЯдЦ"):
        with st.spinner("JarvisFi is thinking..." if current_language == 'en' else 
                       "JarvisFi ропрпЛроЪро┐родрпНродрпБроХрпНроХрпКрогрпНроЯро┐ро░рпБроХрпНроХро┐ро▒родрпБ..." if current_language == 'ta' else 
                       "JarvisFi рд╕реЛрдЪ рд░рд╣рд╛ рд╣реИ..."):
            
            # Simulate AI processing
            time.sleep(1)
            
            # Generate response based on user input
            ai_response = generate_ai_response(user_input, current_language)
            
            # Display response
            st.markdown(ai_response["content"])
            
            # Display metadata
            if ai_response.get("metadata"):
                display_message_metadata(ai_response)
    
    # Add AI response to history
    st.session_state.chat_history.append(ai_response)


def generate_ai_response(user_input: str, language: str) -> Dict[str, Any]:
    """Generate AI response based on user input"""
    user_context = {
        'user_type': st.session_state.user_profile['basic_info']['user_type'],
        'monthly_income': st.session_state.user_profile['basic_info']['monthly_income'],
        'age': st.session_state.user_profile['basic_info'].get('age', 25),
        'location': st.session_state.user_profile['basic_info'].get('location', 'India'),
        'risk_tolerance': st.session_state.user_profile['financial_profile']['risk_tolerance'],
        'investment_experience': st.session_state.user_profile['financial_profile']['investment_experience']
    }
    
    # Simple rule-based response generation (in production, this would call the AI service)
    response_content = generate_rule_based_response(user_input, user_context, language)
    
    # Calculate metadata
    intent = classify_intent(user_input)
    confidence = calculate_confidence(user_input, response_content)
    sentiment = analyze_sentiment(response_content)
    sources = get_relevant_sources(intent)
    
    return {
        "role": "assistant",
        "content": response_content,
        "timestamp": datetime.now().isoformat(),
        "type": "ai_response",
        "metadata": {
            "intent": intent,
            "confidence": confidence,
            "sentiment": sentiment,
            "sources": sources,
            "language": language
        }
    }


def generate_rule_based_response(user_input: str, user_context: Dict[str, Any], language: str) -> str:
    """Generate rule-based response (fallback when AI service is unavailable)"""
    user_input_lower = user_input.lower()
    monthly_income = user_context['monthly_income']
    user_type = user_context['user_type']
    
    # Budget-related queries
    if any(word in user_input_lower for word in ['budget', 'budgeting', 'expense', 'spending']):
        if language == 'en':
            return f"""Great question about budgeting! Based on your monthly income of тВ╣{monthly_income:,}, here's my personalized advice:

**50/30/20 Rule for You:**
тАв **Needs (50%):** тВ╣{int(monthly_income * 0.5):,} for rent, food, utilities
тАв **Wants (30%):** тВ╣{int(monthly_income * 0.3):,} for entertainment, dining out
тАв **Savings (20%):** тВ╣{int(monthly_income * 0.2):,} for emergency fund and investments

**Quick Tips:**
1. Track every expense for one month
2. Use apps like Money Manager or Walnut
3. Set up automatic transfers to savings
4. Review and adjust monthly

Would you like me to help you create a detailed budget breakdown?"""
        
        elif language == 'ta':
            return f"""рокроЯрпНроЬрпЖроЯрпН рокро▒рпНро▒ро┐роп роЪро┐ро▒роирпНрод роХрпЗро│рпНро╡ро┐! роЙроЩрпНроХро│рпН рооро╛родро╛роирпНродро┐ро░ ро╡ро░рпБрооро╛ройроорпН тВ╣{monthly_income:,} роЕроЯро┐рокрпНрокроЯрпИропро┐ро▓рпН, роЗродрпЛ роОройродрпБ родройро┐рокрпНрокропройро╛роХрпНроХрокрпНрокроЯрпНроЯ роЖро▓рпЛроЪройрпИ:

**роЙроЩрпНроХро│рпБроХрпНроХро╛рой 50/30/20 ро╡ро┐родро┐:**
тАв **родрпЗро╡рпИроХро│рпН (50%):** тВ╣{int(monthly_income * 0.5):,} ро╡ро╛роЯроХрпИ, роЙрогро╡рпБ, рокропройрпНрокро╛роЯрпБроХро│рпБроХрпНроХрпБ
тАв **ро╡ро┐ро░рпБрокрпНрокроЩрпНроХро│рпН (30%):** тВ╣{int(monthly_income * 0.3):,} рокрпКро┤рпБродрпБрокрпЛроХрпНроХрпБ, ро╡рпЖро│ро┐ропро┐ро▓рпН роЪро╛рокрпНрокро┐роЯрпБро╡родро▒рпНроХрпБ
тАв **роЪрпЗрооро┐рокрпНрокрпБ (20%):** тВ╣{int(monthly_income * 0.2):,} роЕро╡роЪро░роХро╛ро▓ роиро┐родро┐ рооро▒рпНро▒рпБроорпН роорпБродро▓рпАроЯрпБроХро│рпБроХрпНроХрпБ

**ро╡ро┐ро░рпИро╡рпБ роХрпБро▒ро┐рокрпНрокрпБроХро│рпН:**
1. роТро░рпБ рооро╛родродрпНродро┐ро▒рпНроХрпБ роТро╡рпНро╡рпКро░рпБ роЪрпЖро▓ро╡рпИропрпБроорпН роХрогрпНроХро╛рогро┐роХрпНроХро╡рпБроорпН
2. Money Manager роЕро▓рпНро▓родрпБ Walnut рокрпЛройрпНро▒ рокропройрпНрокро╛роЯрпБроХро│рпИрокрпН рокропройрпНрокроЯрпБродрпНродрпБроЩрпНроХро│рпН
3. роЪрпЗрооро┐рокрпНрокрпБроХрпНроХрпБ родро╛ройро┐ропроЩрпНроХрпБ рокро░ро┐рооро╛ро▒рпНро▒роЩрпНроХро│рпИ роЕроорпИроХрпНроХро╡рпБроорпН
4. рооро╛родроирпНродрпЛро▒рпБроорпН роородро┐рокрпНрокро╛ропрпНро╡рпБ роЪрпЖропрпНродрпБ роЪро░ро┐роЪрпЖропрпНропрпБроЩрпНроХро│рпН

ро╡ро┐ро░ро┐ро╡ро╛рой рокроЯрпНроЬрпЖроЯрпН рокро┐ро░ро┐ро╡рпИ роЙро░рпБро╡ро╛роХрпНроХ роЙродро╡ ро╡рпЗрогрпНроЯрпБрооро╛?"""
    
    # Investment-related queries
    elif any(word in user_input_lower for word in ['invest', 'investment', 'sip', 'mutual fund']):
        if language == 'en':
            suggested_sip = max(1000, int(monthly_income * 0.15))
            return f"""Excellent! Let's talk investments. Based on your profile as a {user_type} with тВ╣{monthly_income:,} monthly income:

**Recommended SIP Amount:** тВ╣{suggested_sip:,}/month (15% of income)

**Investment Strategy:**
1. **Emergency Fund First:** Build 6 months expenses (тВ╣{int(monthly_income * 0.7 * 6):,})
2. **Start SIPs:** Begin with diversified equity funds
3. **Tax Saving:** Consider ELSS funds for 80C benefits
4. **Long-term Focus:** Invest for 5+ years minimum

**Beginner-Friendly Options:**
тАв Index Funds (Nifty 50, Sensex)
тАв Large Cap Mutual Funds
тАв Balanced Advantage Funds

**Next Steps:**
1. Complete KYC with any AMC
2. Start with тВ╣1,000 SIP
3. Increase by 10% annually

Would you like specific fund recommendations?"""
        
        elif language == 'ta':
            suggested_sip = max(1000, int(monthly_income * 0.15))
            return f"""роЕро░рпБроорпИ! роорпБродро▓рпАроЯрпБроХро│рпИрокрпН рокро▒рпНро▒ро┐ рокрпЗроЪрпБро╡рпЛроорпН. тВ╣{monthly_income:,} рооро╛родро╛роирпНродро┐ро░ ро╡ро░рпБрооро╛ройроорпН роХрпКрогрпНроЯ {user_type} роОройрпНро▒ роЙроЩрпНроХро│рпН роЪрпБропро╡ро┐ро╡ро░родрпНродро┐ройрпН роЕроЯро┐рокрпНрокроЯрпИропро┐ро▓рпН:

**рокро░ро┐роирпНродрпБро░рпИроХрпНроХрокрпНрокроЯрпНроЯ SIP родрпКроХрпИ:** тВ╣{suggested_sip:,}/рооро╛родроорпН (ро╡ро░рпБрооро╛ройродрпНродро┐ройрпН 15%)

**роорпБродро▓рпАроЯрпНроЯрпБ роЙродрпНродро┐:**
1. **роорпБродро▓ро┐ро▓рпН роЕро╡роЪро░роХро╛ро▓ роиро┐родро┐:** 6 рооро╛род роЪрпЖро▓ро╡рпБроХро│рпИ роЙро░рпБро╡ро╛роХрпНроХрпБроЩрпНроХро│рпН (тВ╣{int(monthly_income * 0.7 * 6):,})
2. **SIP роХро│рпИродрпН родрпКроЯроЩрпНроХрпБроЩрпНроХро│рпН:** рокро▓рпНро╡роХрпИрокрпНрокроЯрпБродрпНродрокрпНрокроЯрпНроЯ роИроХрпНро╡ро┐роЯрпНроЯро┐ роиро┐родро┐роХро│рпБроЯройрпН родрпКроЯроЩрпНроХрпБроЩрпНроХро│рпН
3. **ро╡ро░ро┐ роЪрпЗрооро┐рокрпНрокрпБ:** 80C роиройрпНроорпИроХро│рпБроХрпНроХрпБ ELSS роиро┐родро┐роХро│рпИроХрпН роХро░рпБродрпНродро┐ро▓рпН роХрпКро│рпНро│рпБроЩрпНроХро│рпН
4. **роирпАрогрпНроЯ роХро╛ро▓ роХро╡ройроорпН:** роХрпБро▒рпИроирпНродрокроЯрпНроЪроорпН 5+ роЖрогрпНроЯрпБроХро│рпБроХрпНроХрпБ роорпБродро▓рпАроЯрпБ роЪрпЖропрпНропрпБроЩрпНроХро│рпН

роЕроЯрпБродрпНрод рокроЯро┐роХро│рпН роОройрпНрой родрпЖро░ро┐роп ро╡рпЗрогрпНроЯрпБрооро╛?"""
    
    # Savings-related queries
    elif any(word in user_input_lower for word in ['save', 'saving', 'savings']):
        if language == 'en':
            target_savings = int(monthly_income * 0.2)
            return f"""Smart thinking about savings! Here's a personalized savings plan for your тВ╣{monthly_income:,} income:

**Monthly Savings Target:** тВ╣{target_savings:,} (20% of income)

**Savings Breakdown:**
тАв **Emergency Fund:** тВ╣{int(target_savings * 0.4):,} (until you have 6 months expenses)
тАв **Short-term Goals:** тВ╣{int(target_savings * 0.3):,} (vacation, gadgets)
тАв **Long-term Investments:** тВ╣{int(target_savings * 0.3):,} (retirement, wealth building)

**Best Savings Options:**
1. **High-yield Savings:** 6-7% annual returns
2. **Fixed Deposits:** 6.5-7.5% for 1-3 years
3. **PPF:** 7.1% tax-free (15-year lock-in)
4. **NSC:** 6.8% with tax benefits

**Automation Tips:**
тАв Set up auto-transfer on salary day
тАв Use separate accounts for different goals
тАв Round up purchases and save the change

Want help setting up automatic savings?"""
    
    # Default response
    else:
        if language == 'en':
            return f"""Hello! I'm JarvisFi, your AI financial genius. I can help you with:

ЁЯТ░ **Budgeting & Expense Management**
ЁЯУИ **Investment Planning & SIPs**
ЁЯПж **Savings Strategies**
ЁЯТ│ **Credit & Debt Management**
ЁЯОп **Financial Goal Planning**
ЁЯУК **Tax Planning**

Based on your profile:
тАв Monthly Income: тВ╣{monthly_income:,}
тАв User Type: {user_type.title()}
тАв Risk Tolerance: {user_context['risk_tolerance'].title()}

What specific financial topic would you like to explore today?"""
        
        elif language == 'ta':
            return f"""ро╡рогроХрпНроХроорпН! роиро╛ройрпН JarvisFi, роЙроЩрпНроХро│рпН AI роиро┐родро┐ роорпЗродрпИ. роиро╛ройрпН роЙроЩрпНроХро│рпБроХрпНроХрпБ роЙродро╡ роорпБроЯро┐ропрпБроорпН:

ЁЯТ░ **рокроЯрпНроЬрпЖроЯрпН & роЪрпЖро▓ро╡рпБ роорпЗро▓ро╛рогрпНроорпИ**
ЁЯУИ **роорпБродро▓рпАроЯрпНроЯрпБ родро┐роЯрпНроЯрооро┐роЯро▓рпН & SIP роХро│рпН**
ЁЯПж **роЪрпЗрооро┐рокрпНрокрпБ роЙродрпНродро┐роХро│рпН**
ЁЯТ│ **роХро┐ро░рпЖроЯро┐роЯрпН & роХроЯройрпН роорпЗро▓ро╛рогрпНроорпИ**
ЁЯОп **роиро┐родро┐ роЗро▓роХрпНроХрпБ родро┐роЯрпНроЯрооро┐роЯро▓рпН**
ЁЯУК **ро╡ро░ро┐ родро┐роЯрпНроЯрооро┐роЯро▓рпН**

роЙроЩрпНроХро│рпН роЪрпБропро╡ро┐ро╡ро░родрпНродро┐ройрпН роЕроЯро┐рокрпНрокроЯрпИропро┐ро▓рпН:
тАв рооро╛родро╛роирпНродро┐ро░ ро╡ро░рпБрооро╛ройроорпН: тВ╣{monthly_income:,}
тАв рокропройро░рпН ро╡роХрпИ: {user_type.title()}

роЗройрпНро▒рпБ роОроирпНрод роХрпБро▒ро┐рокрпНрокро┐роЯрпНроЯ роиро┐родро┐ родро▓рпИрокрпНрокрпИ роЖро░ро╛роп ро╡ро┐ро░рпБроорпНрокрпБроХро┐ро▒рпАро░рпНроХро│рпН?"""
    
    return "I'm here to help with your financial questions!"


def classify_intent(user_input: str) -> str:
    """Classify user intent from input"""
    user_input_lower = user_input.lower()
    
    if any(word in user_input_lower for word in ['budget', 'expense', 'spending']):
        return 'budgeting'
    elif any(word in user_input_lower for word in ['invest', 'investment', 'sip', 'mutual fund']):
        return 'investment'
    elif any(word in user_input_lower for word in ['save', 'saving', 'savings']):
        return 'savings'
    elif any(word in user_input_lower for word in ['loan', 'debt', 'credit']):
        return 'debt_management'
    elif any(word in user_input_lower for word in ['tax', 'taxation']):
        return 'tax_planning'
    elif any(word in user_input_lower for word in ['insurance', 'policy']):
        return 'insurance'
    else:
        return 'general_financial'


def calculate_confidence(user_input: str, response: str) -> float:
    """Calculate confidence score for response"""
    # Simple confidence calculation
    confidence = 0.7  # Base confidence
    
    # Increase confidence for longer, more detailed responses
    if len(response) > 200:
        confidence += 0.1
    
    # Increase confidence if response contains specific financial terms
    financial_terms = ['investment', 'savings', 'budget', 'SIP', 'mutual fund', 'PPF', 'ELSS']
    term_count = sum(1 for term in financial_terms if term.lower() in response.lower())
    confidence += min(term_count * 0.05, 0.2)
    
    return min(confidence, 1.0)


def analyze_sentiment(text: str) -> Dict[str, Any]:
    """Analyze sentiment of text"""
    # Simple sentiment analysis
    positive_words = ['good', 'great', 'excellent', 'smart', 'wise', 'beneficial']
    negative_words = ['bad', 'poor', 'risky', 'dangerous', 'avoid']
    
    text_lower = text.lower()
    positive_count = sum(1 for word in positive_words if word in text_lower)
    negative_count = sum(1 for word in negative_words if word in text_lower)
    
    if positive_count > negative_count:
        return {"label": "POSITIVE", "score": 0.8}
    elif negative_count > positive_count:
        return {"label": "NEGATIVE", "score": 0.8}
    else:
        return {"label": "NEUTRAL", "score": 0.6}


def get_relevant_sources(intent: str) -> List[str]:
    """Get relevant sources for financial advice"""
    sources = {
        'investment': ['SEBI Guidelines', 'Mutual Fund Fact Sheets', 'RBI Investment Guidelines'],
        'tax_planning': ['Income Tax Act 1961', 'CBDT Circulars', 'Tax Planning Guidelines'],
        'savings': ['RBI Savings Guidelines', 'Bank Interest Rate Policies', 'Government Savings Schemes'],
        'insurance': ['IRDAI Guidelines', 'Insurance Product Comparisons', 'Claim Settlement Ratios'],
        'budgeting': ['Personal Finance Best Practices', 'Financial Planning Guidelines'],
        'debt_management': ['RBI Debt Guidelines', 'Credit Bureau Reports', 'Debt Management Strategies']
    }
    
    return sources.get(intent, ['General Financial Guidelines', 'RBI Publications'])


def render_quick_actions():
    """Render quick action buttons"""
    current_language = st.session_state.user_profile['basic_info']['language']
    
    st.markdown("---")
    if current_language == 'en':
        st.markdown("**ЁЯТб Quick Questions:**")
    elif current_language == 'ta':
        st.markdown("**ЁЯТб ро╡ро┐ро░рпИро╡рпБ роХрпЗро│рпНро╡ро┐роХро│рпН:**")
    elif current_language == 'hi':
        st.markdown("**ЁЯТб рддреНрд╡рд░рд┐рдд рдкреНрд░рд╢реНрди:**")
    
    # Quick action buttons
    col1, col2, col3 = st.columns(3)
    
    quick_questions = {
        'en': [
            "How to start investing?",
            "Create a budget plan",
            "Best savings options?"
        ],
        'ta': [
            "роорпБродро▓рпАроЯрпБ роОрокрпНрокроЯро┐ родрпКроЯроЩрпНроХрпБро╡родрпБ?",
            "рокроЯрпНроЬрпЖроЯрпН родро┐роЯрпНроЯроорпН роЙро░рпБро╡ро╛роХрпНроХрпБ",
            "роЪро┐ро▒роирпНрод роЪрпЗрооро┐рокрпНрокрпБ ро╡ро┐ро░рпБрокрпНрокроЩрпНроХро│рпН?"
        ],
        'hi': [
            "рдирд┐рд╡реЗрд╢ рдХреИрд╕реЗ рд╢реБрд░реВ рдХрд░реЗрдВ?",
            "рдмрдЬрдЯ рдпреЛрдЬрдирд╛ рдмрдирд╛рдПрдВ",
            "рд╕рд░реНрд╡реЛрддреНрддрдо рдмрдЪрдд рд╡рд┐рдХрд▓реНрдк?"
        ]
    }
    
    questions = quick_questions.get(current_language, quick_questions['en'])
    
    with col1:
        if st.button(questions[0], key="quick_1"):
            process_user_message(questions[0])
    
    with col2:
        if st.button(questions[1], key="quick_2"):
            process_user_message(questions[1])
    
    with col3:
        if st.button(questions[2], key="quick_3"):
            process_user_message(questions[2])


def render_voice_controls():
    """Render voice interface controls"""
    current_language = st.session_state.user_profile['basic_info']['language']
    
    if st.session_state.user_profile['preferences']['voice_enabled']:
        st.markdown("---")
        if current_language == 'en':
            st.markdown("**ЁЯОд Voice Controls:**")
        elif current_language == 'ta':
            st.markdown("**ЁЯОд роХрпБро░ро▓рпН роХроЯрпНроЯрпБрокрпНрокро╛роЯрпБроХро│рпН:**")
        elif current_language == 'hi':
            st.markdown("**ЁЯОд рдЖрд╡рд╛рдЬрд╝ рдирд┐рдпрдВрддреНрд░рдг:**")
        
        col1, col2 = st.columns(2)
        
        with col1:
            if st.button("ЁЯОЩя╕П " + ("Voice Input" if current_language == 'en' else "роХрпБро░ро▓рпН роЙро│рпНро│рпАроЯрпБ" if current_language == 'ta' else "рдЖрд╡рд╛рдЬрд╝ рдЗрдирдкреБрдЯ"), key="voice_input_chat"):
                st.info("Voice input feature coming soon!")
        
        with col2:
            if st.button("ЁЯФК " + ("Read Aloud" if current_language == 'en' else "роЪродрпНродрооро╛роХ рокроЯро┐роХрпНроХро╡рпБроорпН" if current_language == 'ta' else "рдЬреЛрд░ рд╕реЗ рдкрдврд╝реЗрдВ"), key="voice_output_chat"):
                st.info("Text-to-speech feature coming soon!")
