"""
JarvisFi - Sidebar Component
Comprehensive sidebar with all user controls and settings
"""

import streamlit as st
import time
from datetime import datetime
from typing import Dict, Any

def render_sidebar():
    """Render comprehensive sidebar"""
    
    with st.sidebar:
        # JarvisFi branding
        st.markdown("""
        <div style="text-align: center; padding: 1rem; background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); border-radius: 10px; margin-bottom: 1rem;">
            <h2 style="color: white; margin: 0;">ЁЯдЦ JarvisFi</h2>
            <p style="color: white; margin: 0; opacity: 0.9; font-size: 0.9rem;">Your AI Financial Genius</p>
        </div>
        """, unsafe_allow_html=True)
        
        # User Profile Section
        render_user_profile_section()
        
        # Language & Preferences
        render_language_section()
        
        # Voice Interface Controls
        render_voice_section()
        
        # Financial Profile
        render_financial_profile_section()
        
        # Security Settings
        render_security_section()
        
        # AI Features
        render_ai_features_section()
        
        # Advanced Settings
        render_advanced_settings()
        
        # Help & Support
        render_help_section()


def render_user_profile_section():
    """Render user profile section"""
    current_language = st.session_state.user_profile['basic_info']['language']
    
    st.markdown("### ЁЯСд " + ("User Profile" if current_language == 'en' else 
                           "рокропройро░рпН роЪрпБропро╡ро┐ро╡ро░роорпН" if current_language == 'ta' else 
                           "рдЙрдкрдпреЛрдЧрдХрд░реНрддрд╛ рдкреНрд░реЛрдлрд╝рд╛рдЗрд▓" if current_language == 'hi' else "User Profile"))
    
    # Name input
    current_name = st.session_state.user_profile['basic_info']['name']
    name = st.text_input(
        "Name" if current_language == 'en' else "рокрпЖропро░рпН" if current_language == 'ta' else "рдирд╛рдо",
        value=current_name,
        key="sidebar_name"
    )
    
    if name != current_name:
        st.session_state.user_profile['basic_info']['name'] = name
    
    # User type selection
    user_types = {
        'en': ['Beginner', 'Intermediate', 'Professional', 'Student', 'Farmer', 'Senior Citizen'],
        'ta': ['родрпКроЯроХрпНроХроиро┐ро▓рпИ', 'роЗроЯрпИроиро┐ро▓рпИ', 'родрпКро┤ро┐ро▓рпНроорпБро▒рпИ', 'рооро╛рогро╡ро░рпН', 'ро╡ро┐ро╡роЪро╛ропро┐', 'роорпВродрпНрод роХрпБроЯро┐роороХройрпН'],
        'hi': ['рд╢реБрд░реБрдЖрддреА', 'рдордзреНрдпрдо', 'рдкреЗрд╢реЗрд╡рд░', 'рдЫрд╛рддреНрд░', 'рдХрд┐рд╕рд╛рди', 'рд╡рд░рд┐рд╖реНрда рдирд╛рдЧрд░рд┐рдХ']
    }
    
    user_type_values = ['beginner', 'intermediate', 'professional', 'student', 'farmer', 'senior_citizen']
    current_user_type = st.session_state.user_profile['basic_info']['user_type']
    
    try:
        current_index = user_type_values.index(current_user_type)
    except ValueError:
        current_index = 0
    
    selected_user_type = st.selectbox(
        "User Type" if current_language == 'en' else "рокропройро░рпН ро╡роХрпИ" if current_language == 'ta' else "рдЙрдкрдпреЛрдЧрдХрд░реНрддрд╛ рдкреНрд░рдХрд╛рд░",
        options=user_types.get(current_language, user_types['en']),
        index=current_index,
        key="sidebar_user_type"
    )
    
    # Update user type
    new_user_type = user_type_values[user_types.get(current_language, user_types['en']).index(selected_user_type)]
    if new_user_type != current_user_type:
        st.session_state.user_profile['basic_info']['user_type'] = new_user_type


def render_language_section():
    """Render language and localization section"""
    current_language = st.session_state.user_profile['basic_info']['language']
    
    st.markdown("---")
    st.markdown("### ЁЯМР " + ("Language & Region" if current_language == 'en' else 
                           "роорпКро┤ро┐ & рокроХрпБродро┐" if current_language == 'ta' else 
                           "рднрд╛рд╖рд╛ рдФрд░ рдХреНрд╖реЗрддреНрд░" if current_language == 'hi' else "Language & Region"))
    
    # Language selection
    languages = {
        'English': 'en',
        'родрооро┐ро┤рпН (Tamil)': 'ta', 
        'рд╣рд┐рдВрджреА (Hindi)': 'hi',
        'р░др▒Жр░▓р▒Бр░Чр▒Б (Telugu)': 'te'
    }
    
    current_lang_display = next(k for k, v in languages.items() if v == current_language)
    
    selected_language = st.selectbox(
        "Language" if current_language == 'en' else "роорпКро┤ро┐" if current_language == 'ta' else "рднрд╛рд╖рд╛",
        options=list(languages.keys()),
        index=list(languages.keys()).index(current_lang_display),
        key="sidebar_language"
    )
    
    new_language = languages[selected_language]
    if new_language != current_language:
        st.session_state.user_profile['basic_info']['language'] = new_language
        st.rerun()
    
    # Currency selection
    currencies = ['INR', 'USD', 'EUR', 'GBP', 'JPY', 'AUD', 'CAD', 'SGD']
    current_currency = st.session_state.user_profile['basic_info']['currency']
    
    selected_currency = st.selectbox(
        "Currency" if current_language == 'en' else "роиро╛рогропроорпН" if current_language == 'ta' else "рдореБрджреНрд░рд╛",
        options=currencies,
        index=currencies.index(current_currency) if current_currency in currencies else 0,
        key="sidebar_currency"
    )
    
    if selected_currency != current_currency:
        st.session_state.user_profile['basic_info']['currency'] = selected_currency
    
    # Dark mode toggle
    dark_mode = st.toggle(
        "ЁЯМЩ Dark Mode" if current_language == 'en' else "ЁЯМЩ роЗро░рпБрогрпНроЯ рокропройрпНроорпБро▒рпИ" if current_language == 'ta' else "ЁЯМЩ рдбрд╛рд░реНрдХ рдореЛрдб",
        value=st.session_state.user_profile['preferences']['dark_mode'],
        key="sidebar_dark_mode"
    )
    
    if dark_mode != st.session_state.user_profile['preferences']['dark_mode']:
        st.session_state.user_profile['preferences']['dark_mode'] = dark_mode
        st.rerun()


def render_voice_section():
    """Render voice interface section"""
    current_language = st.session_state.user_profile['basic_info']['language']
    
    st.markdown("---")
    st.markdown("### ЁЯОд " + ("Voice Assistant" if current_language == 'en' else 
                           "роХрпБро░ро▓рпН роЙродро╡ро┐ропро╛ро│ро░рпН" if current_language == 'ta' else 
                           "рдЖрд╡рд╛рдЬрд╝ рд╕рд╣рд╛рдпрдХ" if current_language == 'hi' else "Voice Assistant"))
    
    # Voice controls
    col1, col2 = st.columns(2)
    
    with col1:
        if st.button("ЁЯОЩя╕П " + ("Listen" if current_language == 'en' else "роХрпЗро│рпБроЩрпНроХро│рпН" if current_language == 'ta' else "рд╕реБрдиреЗрдВ"), key="voice_listen"):
            st.session_state.voice_listening = True
            st.success("Listening..." if current_language == 'en' else "роХрпЗроЯрпНроХро┐ро▒родрпБ..." if current_language == 'ta' else "рд╕реБрди рд░рд╣рд╛ рд╣реИ...")
    
    with col2:
        if st.button("ЁЯФК " + ("Speak" if current_language == 'en' else "рокрпЗроЪрпБроЩрпНроХро│рпН" if current_language == 'ta' else "рдмреЛрд▓реЗрдВ"), key="voice_speak"):
            st.session_state.voice_speaking = True
            st.success("Speaking..." if current_language == 'en' else "рокрпЗроЪрпБроХро┐ро▒родрпБ..." if current_language == 'ta' else "рдмреЛрд▓ рд░рд╣рд╛ рд╣реИ...")
    
    # Voice settings
    voice_enabled = st.toggle(
        "Enable Voice" if current_language == 'en' else "роХрпБро░ро▓рпИ роЗропроХрпНроХрпБ" if current_language == 'ta' else "рдЖрд╡рд╛рдЬрд╝ рд╕рдХреНрд╖рдо рдХрд░реЗрдВ",
        value=st.session_state.user_profile['preferences']['voice_enabled'],
        key="voice_enabled_toggle"
    )
    
    if voice_enabled != st.session_state.user_profile['preferences']['voice_enabled']:
        st.session_state.user_profile['preferences']['voice_enabled'] = voice_enabled
    
    # Voice speed
    voice_speed = st.slider(
        "Speech Speed" if current_language == 'en' else "рокрпЗроЪрпНроЪрпБ ро╡рпЗроХроорпН" if current_language == 'ta' else "рдмреЛрд▓рдиреЗ рдХреА рдЧрддрд┐",
        min_value=0.5, max_value=2.0, value=1.0, step=0.1,
        key="voice_speed"
    )


def render_financial_profile_section():
    """Render financial profile section"""
    current_language = st.session_state.user_profile['basic_info']['language']
    
    st.markdown("---")
    st.markdown("### ЁЯТ░ " + ("Financial Profile" if current_language == 'en' else 
                           "роиро┐родро┐ роЪрпБропро╡ро┐ро╡ро░роорпН" if current_language == 'ta' else 
                           "рд╡рд┐рддреНрддреАрдп рдкреНрд░реЛрдлрд╝рд╛рдЗрд▓" if current_language == 'hi' else "Financial Profile"))
    
    # Monthly income
    current_income = st.session_state.user_profile['basic_info']['monthly_income']
    monthly_income = st.number_input(
        "Monthly Income (тВ╣)" if current_language == 'en' else "рооро╛родро╛роирпНродро┐ро░ ро╡ро░рпБрооро╛ройроорпН (тВ╣)" if current_language == 'ta' else "рдорд╛рд╕рд┐рдХ рдЖрдп (тВ╣)",
        min_value=0,
        max_value=10000000,
        value=current_income,
        step=5000,
        key="sidebar_monthly_income"
    )
    
    if monthly_income != current_income:
        st.session_state.user_profile['basic_info']['monthly_income'] = monthly_income
    
    # Risk tolerance
    risk_levels = {
        'en': ['Conservative', 'Moderate', 'Aggressive'],
        'ta': ['рокро╛родрпБроХро╛рокрпНрокро╛рой', 'рооро┐родрооро╛рой', 'родрпАро╡ро┐ро░рооро╛рой'],
        'hi': ['рд░реВрдврд╝рд┐рд╡рд╛рджреА', 'рдордзреНрдпрдо', 'рдЖрдХреНрд░рд╛рдордХ']
    }
    
    current_risk = st.session_state.user_profile['financial_profile']['risk_tolerance']
    risk_values = ['conservative', 'moderate', 'aggressive']
    
    try:
        risk_index = risk_values.index(current_risk)
    except ValueError:
        risk_index = 1  # Default to moderate
    
    selected_risk = st.selectbox(
        "Risk Tolerance" if current_language == 'en' else "роЖрокродрпНродрпБ роЪроХро┐рокрпНрокрпБродрпНродройрпНроорпИ" if current_language == 'ta' else "рдЬреЛрдЦрд┐рдо рд╕рд╣рдирд╢реАрд▓рддрд╛",
        options=risk_levels.get(current_language, risk_levels['en']),
        index=risk_index,
        key="sidebar_risk_tolerance"
    )
    
    new_risk = risk_values[risk_levels.get(current_language, risk_levels['en']).index(selected_risk)]
    if new_risk != current_risk:
        st.session_state.user_profile['financial_profile']['risk_tolerance'] = new_risk
    
    # Investment experience
    experience_levels = {
        'en': ['Beginner', 'Intermediate', 'Advanced'],
        'ta': ['родрпКроЯроХрпНроХроиро┐ро▓рпИ', 'роЗроЯрпИроиро┐ро▓рпИ', 'роорпЗроорпНрокроЯрпНроЯ'],
        'hi': ['рд╢реБрд░реБрдЖрддреА', 'рдордзреНрдпрдо', 'рдЙрдиреНрдирдд']
    }
    
    current_exp = st.session_state.user_profile['financial_profile']['investment_experience']
    exp_values = ['beginner', 'intermediate', 'advanced']
    
    try:
        exp_index = exp_values.index(current_exp)
    except ValueError:
        exp_index = 0  # Default to beginner
    
    selected_exp = st.selectbox(
        "Investment Experience" if current_language == 'en' else "роорпБродро▓рпАроЯрпНроЯрпБ роЕройрпБрокро╡роорпН" if current_language == 'ta' else "рдирд┐рд╡реЗрд╢ рдЕрдиреБрднрд╡",
        options=experience_levels.get(current_language, experience_levels['en']),
        index=exp_index,
        key="sidebar_investment_experience"
    )
    
    new_exp = exp_values[experience_levels.get(current_language, experience_levels['en']).index(selected_exp)]
    if new_exp != current_exp:
        st.session_state.user_profile['financial_profile']['investment_experience'] = new_exp


def render_security_section():
    """Render security settings section"""
    current_language = st.session_state.user_profile['basic_info']['language']
    
    st.markdown("---")
    st.markdown("### ЁЯФР " + ("Security" if current_language == 'en' else 
                           "рокро╛родрпБроХро╛рокрпНрокрпБ" if current_language == 'ta' else 
                           "рд╕реБрд░рдХреНрд╖рд╛" if current_language == 'hi' else "Security"))
    
    # Security status
    st.markdown("**Status:** ЁЯЯв " + ("Secure" if current_language == 'en' else "рокро╛родрпБроХро╛рокрпНрокро╛рой" if current_language == 'ta' else "рд╕реБрд░рдХреНрд╖рд┐рдд"))
    
    # Two-factor authentication
    two_factor = st.toggle(
        "Two-Factor Auth" if current_language == 'en' else "роЗро░рпБ-роХро╛ро░рогро┐ роЕроЩрпНроХрпАроХро╛ро░роорпН" if current_language == 'ta' else "рджреНрд╡рд┐рдХрд╛рд░рдХ рдкреНрд░рдорд╛рдгреАрдХрд░рдг",
        value=False,
        key="two_factor_auth"
    )
    
    # Biometric authentication
    biometric = st.toggle(
        "Biometric Auth" if current_language == 'en' else "роЙропро┐ро░ро┐ропро▓рпН роЕроЩрпНроХрпАроХро╛ро░роорпН" if current_language == 'ta' else "рдмрд╛рдпреЛрдореЗрдЯреНрд░рд┐рдХ рдкреНрд░рдорд╛рдгреАрдХрд░рдг",
        value=False,
        key="biometric_auth"
    )
    
    # Data encryption
    encryption = st.toggle(
        "Data Encryption" if current_language == 'en' else "родро░ро╡рпБ роХрпБро▒ро┐ропро╛роХрпНроХроорпН" if current_language == 'ta' else "рдбреЗрдЯрд╛ рдПрдиреНрдХреНрд░рд┐рдкреНрд╢рди",
        value=True,
        key="data_encryption"
    )


def render_ai_features_section():
    """Render AI features section"""
    current_language = st.session_state.user_profile['basic_info']['language']
    
    st.markdown("---")
    st.markdown("### ЁЯза " + ("AI Features" if current_language == 'en' else 
                           "AI роЕроорпНроЪроЩрпНроХро│рпН" if current_language == 'ta' else 
                           "AI рд╕реБрд╡рд┐рдзрд╛рдПрдВ" if current_language == 'hi' else "AI Features"))
    
    # AI accuracy
    ai_accuracy = st.toggle(
        "AI Fact-Checking" if current_language == 'en' else "AI роЙрогрпНроорпИ роЪро░ро┐рокро╛ро░рпНрокрпНрокрпБ" if current_language == 'ta' else "AI рддрдереНрдп рдЬрд╛рдВрдЪ",
        value=True,
        key="ai_accuracy"
    )
    
    # Enhanced sources
    enhanced_sources = st.toggle(
        "Enhanced Sources" if current_language == 'en' else "роорпЗроорпНрокроЯрпНроЯ роЖродро╛ро░роЩрпНроХро│рпН" if current_language == 'ta' else "рдЙрдиреНрдирдд рд╕реНрд░реЛрдд",
        value=True,
        key="enhanced_sources"
    )
    
    # Response style
    response_styles = {
        'en': ['Professional', 'Friendly', 'Detailed', 'Concise'],
        'ta': ['родрпКро┤ро┐ро▓рпНроорпБро▒рпИ', 'роироЯрпНрокрпБ', 'ро╡ро┐ро░ро┐ро╡ро╛рой', 'роЪрпБро░рпБроХрпНроХрооро╛рой'],
        'hi': ['рдкреЗрд╢реЗрд╡рд░', 'рдорд┐рддреНрд░рд╡рдд', 'рд╡рд┐рд╕реНрддреГрдд', 'рд╕рдВрдХреНрд╖рд┐рдкреНрдд']
    }
    
    response_style = st.selectbox(
        "Response Style" if current_language == 'en' else "рокродро┐ро▓рпН рокро╛рогро┐" if current_language == 'ta' else "рдЙрддреНрддрд░ рд╢реИрд▓реА",
        options=response_styles.get(current_language, response_styles['en']),
        index=0,
        key="ai_response_style"
    )
    
    # Learning mode
    learning_mode = st.toggle(
        "Learning Mode" if current_language == 'en' else "роХро▒рпНро▒ро▓рпН рокропройрпНроорпБро▒рпИ" if current_language == 'ta' else "рд╕реАрдЦрдиреЗ рдХрд╛ рдореЛрдб",
        value=False,
        key="learning_mode"
    )


def render_advanced_settings():
    """Render advanced settings"""
    current_language = st.session_state.user_profile['basic_info']['language']
    
    with st.expander("ЁЯФз " + ("Advanced Settings" if current_language == 'en' else 
                             "роорпЗроорпНрокроЯрпНроЯ роЕроорпИрокрпНрокрпБроХро│рпН" if current_language == 'ta' else 
                             "рдЙрдиреНрдирдд рд╕реЗрдЯрд┐рдВрдЧреНрд╕" if current_language == 'hi' else "Advanced Settings")):
        
        # Accessibility mode
        accessibility_mode = st.toggle(
            "Accessibility Mode" if current_language == 'en' else "роЕрогрпБроХро▓рпНродройрпНроорпИ рокропройрпНроорпБро▒рпИ" if current_language == 'ta' else "рдкрд╣реБрдВрдЪ рдореЛрдб",
            value=st.session_state.user_profile['preferences']['accessibility_mode'],
            key="accessibility_mode"
        )
        
        if accessibility_mode != st.session_state.user_profile['preferences']['accessibility_mode']:
            st.session_state.user_profile['preferences']['accessibility_mode'] = accessibility_mode
            st.rerun()
        
        # Notifications
        notifications = st.toggle(
            "Notifications" if current_language == 'en' else "роЕро▒ро┐ро╡ро┐рокрпНрокрпБроХро│рпН" if current_language == 'ta' else "рд╕реВрдЪрдирд╛рдПрдВ",
            value=st.session_state.user_profile['preferences']['notifications'],
            key="notifications_toggle"
        )
        
        if notifications != st.session_state.user_profile['preferences']['notifications']:
            st.session_state.user_profile['preferences']['notifications'] = notifications
        
        # Performance mode
        performance_modes = ['Balanced', 'High Performance', 'Battery Saver']
        performance_mode = st.selectbox(
            "Performance Mode" if current_language == 'en' else "роЪрпЖропро▓рпНродро┐ро▒ройрпН рокропройрпНроорпБро▒рпИ" if current_language == 'ta' else "рдкреНрд░рджрд░реНрд╢рди рдореЛрдб",
            options=performance_modes,
            index=0,
            key="performance_mode"
        )
        
        # Data usage
        data_usage = st.selectbox(
            "Data Usage" if current_language == 'en' else "родро░ро╡рпБ рокропройрпНрокро╛роЯрпБ" if current_language == 'ta' else "рдбреЗрдЯрд╛ рдЙрдкрдпреЛрдЧ",
            options=['Unlimited', 'Limited', 'Offline Only'],
            index=0,
            key="data_usage"
        )


def render_help_section():
    """Render help and support section"""
    current_language = st.session_state.user_profile['basic_info']['language']
    
    st.markdown("---")
    st.markdown("### тД╣я╕П " + ("Help & Support" if current_language == 'en' else 
                           "роЙродро╡ро┐ & роЖродро░ро╡рпБ" if current_language == 'ta' else 
                           "рд╕рд╣рд╛рдпрддрд╛ рдФрд░ рд╕рдорд░реНрдерди" if current_language == 'hi' else "Help & Support"))
    
    # Quick help buttons
    if st.button("ЁЯУЪ " + ("User Guide" if current_language == 'en' else "рокропройро░рпН ро╡ро┤ро┐роХро╛роЯрпНроЯро┐" if current_language == 'ta' else "рдЙрдкрдпреЛрдЧрдХрд░реНрддрд╛ рдЧрд╛рдЗрдб"), key="user_guide"):
        st.info("User guide will open in a new tab.")
    
    if st.button("ЁЯТм " + ("Contact Support" if current_language == 'en' else "роЖродро░ро╡рпИродрпН родрпКроЯро░рпНрокрпБ роХрпКро│рпНро│рпБроЩрпНроХро│рпН" if current_language == 'ta' else "рд╕рд╣рд╛рдпрддрд╛ рд╕реЗ рд╕рдВрдкрд░реНрдХ рдХрд░реЗрдВ"), key="contact_support"):
        st.info("Support chat will be available soon.")
    
    if st.button("ЁЯРЫ " + ("Report Bug" if current_language == 'en' else "рокро┐ро┤рпИропрпИрокрпН рокрпБроХро╛ро░ро│ро┐роХрпНроХро╡рпБроорпН" if current_language == 'ta' else "рдмрдЧ рд░рд┐рдкреЛрд░реНрдЯ рдХрд░реЗрдВ"), key="report_bug"):
        st.info("Bug report form will open.")
    
    # App information
    st.markdown("---")
    st.markdown("**JarvisFi v2.0.0**")
    st.markdown("*Your AI-Powered Financial Genius*" if current_language == 'en' else 
               "*роЙроЩрпНроХро│рпН AI-роЗропроЩрпНроХрпБроорпН роиро┐родро┐ роорпЗродрпИ*" if current_language == 'ta' else 
               "*рдЖрдкрдХрд╛ AI-рд╕рдВрдЪрд╛рд▓рд┐рдд рд╡рд┐рддреНрддреАрдп рдкреНрд░рддрд┐рднрд╛*")
    
    # System status
    st.markdown("**System Status:** ЁЯЯв " + ("Online" if current_language == 'en' else "роЖройрпНро▓рпИройрпН" if current_language == 'ta' else "рдСрдирд▓рд╛рдЗрди"))
