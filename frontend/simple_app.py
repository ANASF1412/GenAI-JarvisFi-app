import streamlit as st
import pandas as pd
import plotly.express as px
import plotly.graph_objects as go
import json
import os
from datetime import datetime, timedelta
import sys
import logging
from typing import Dict, List
import base64
from io import BytesIO
import time

# Add backend modules to path
sys.path.append(os.path.join(os.path.dirname(__file__), '..', 'backend'))
sys.path.append(os.path.join(os.path.dirname(__file__), '..'))

# Import backend modules with graceful fallbacks
watson_integration = None
budget_analyzer = None
demographic_adapter = None
nlp_processor = None
currency_converter = None
pdf_generator = None
smart_alerts = None
language_support = None
user_profile_manager = None
enhanced_ui = None
mongodb_manager = None
security_manager = None
voice_interface = None
ai_accuracy_rag = None
currency_localization = None

# Try to import each module individually
try:
    from backend.language_support import LanguageSupport
    language_support = LanguageSupport
except ImportError:
    print("‚ö†Ô∏è LanguageSupport not available")

try:
    from frontend.enhanced_ui import EnhancedUI
    enhanced_ui = EnhancedUI
except ImportError:
    print("‚ö†Ô∏è EnhancedUI not available")

try:
    from backend.watson_integration import WatsonIntegration
    watson_integration = WatsonIntegration
except ImportError:
    print("‚ö†Ô∏è WatsonIntegration not available")

try:
    from backend.voice_interface import VoiceInterface
    voice_interface = VoiceInterface
except ImportError:
    print("‚ö†Ô∏è VoiceInterface not available")

try:
    from backend.user_profile_manager import UserProfileManager
    user_profile_manager = UserProfileManager
except ImportError:
    print("‚ö†Ô∏è UserProfileManager not available")

# Configure logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

class ComprehensiveFinanceApp:
    def __init__(self):
        """Initialize Comprehensive Finance App with graceful fallbacks"""
        # Setup logger first
        self.logger = logging.getLogger(__name__)

        # Initialize core components with fallbacks
        self.watson = watson_integration() if watson_integration else None
        self.language_support = language_support() if language_support else self.create_fallback_language_support()
        self.enhanced_ui = enhanced_ui() if enhanced_ui else self.create_fallback_ui()
        self.user_profile_manager = user_profile_manager() if user_profile_manager else self.create_fallback_profile_manager()
        self.voice_interface = voice_interface() if voice_interface else self.create_fallback_voice_interface()

        # Optional advanced features (can be None)
        self.mongodb_manager = None
        self.security_manager = None
        self.ai_rag = None
        self.currency_manager = None
        self.budget_analyzer = None
        self.demographic_adapter = None
        self.nlp_processor = None
        self.currency_converter = None
        self.pdf_generator = None
        self.alert_system = None

        self.logger.info("‚úÖ Finance app initialized with available features")

        # Initialize session state and user data
        self.init_session_state()
        self.load_user_data()

    def create_fallback_language_support(self):
        """Create fallback language support"""
        class FallbackLanguageSupport:
            def __init__(self):
                self.current_language = 'english'

            def set_language(self, language):
                self.current_language = language

            def get_text(self, key):
                texts = {
                    'ask_question': "Ask about budgets, savings, investments..." if self.current_language == 'english' else "‡Æ™‡Æü‡Øç‡Æú‡ØÜ‡Æü‡Øç, ‡Æö‡Øá‡ÆÆ‡Æø‡Æ™‡Øç‡Æ™‡ØÅ, ‡ÆÆ‡ØÅ‡Æ§‡Æ≤‡ØÄ‡Æü‡ØÅ ‡Æ™‡Æ±‡Øç‡Æ±‡Æø ‡Æï‡Øá‡Æ≥‡ØÅ‡Æô‡Øç‡Æï‡Æ≥‡Øç..."
                }
                return texts.get(key, key)

            def translate_response(self, text):
                return text  # Simple passthrough

        return FallbackLanguageSupport()

    def create_fallback_ui(self):
        """Create fallback UI"""
        class FallbackUI:
            def setup_custom_css(self, dark_mode=False):
                pass

            def create_info_card(self, title, content, icon):
                st.info(f"{icon} **{title}**: {content}")

            def create_chat_message(self, content, is_user=True, language='english'):
                role = "üôã You" if is_user else "ü§ñ Assistant"
                st.markdown(f"**{role}:** {content}")

        return FallbackUI()

    def create_fallback_profile_manager(self):
        """Create fallback profile manager"""
        class FallbackProfileManager:
            def create_user_profile(self, data):
                return {
                    'basic_info': {
                        'name': data.get('name', ''),
                        'age': data.get('age', 25),
                        'user_type': data.get('user_type', 'beginner'),
                        'language': data.get('language', 'english'),
                        'currency': data.get('currency', 'INR')
                    }
                }

            def get_personalized_greeting(self, profile, language):
                name = profile.get('basic_info', {}).get('name', 'User')
                if language == 'tamil':
                    return f"‡Æµ‡Æ£‡Æï‡Øç‡Æï‡ÆÆ‡Øç {name}! ‡Æâ‡Æô‡Øç‡Æï‡Æ≥‡Øç ‡Æ®‡Æø‡Æ§‡Æø ‡Æâ‡Æ§‡Æµ‡Æø‡ÆØ‡Ææ‡Æ≥‡Æ∞‡ØÅ‡Æï‡Øç‡Æï‡ØÅ ‡Æµ‡Æ∞‡Æµ‡Øá‡Æ±‡Øç‡Æï‡Æø‡Æ±‡Øã‡ÆÆ‡Øç."
                return f"Welcome {name}! Ready to manage your finances?"

        return FallbackProfileManager()

    def create_fallback_voice_interface(self):
        """Create fallback voice interface"""
        class FallbackVoiceInterface:
            def text_to_speech(self, text, language='english'):
                pass  # No voice output in fallback

        return FallbackVoiceInterface()
        
    def setup_page_config(self):
        """Setup page configuration"""
        try:
            st.set_page_config(
                page_title="Personal Finance Assistant",
                page_icon="üí∞",
                layout="wide",
                initial_sidebar_state="expanded"
            )
        except Exception as e:
            # Page config already set, ignore
            pass

    def setup_session_state(self):
        """Setup basic session state for compatibility"""
        if 'language' not in st.session_state:
            st.session_state.language = st.session_state.user_profile.get('basic_info', {}).get('language', 'english')

        if 'user_type' not in st.session_state:
            st.session_state.user_type = st.session_state.user_profile.get('basic_info', {}).get('user_type', 'beginner')
        
    def init_session_state(self):
        """Initialize comprehensive session state"""
        if 'user_profile' not in st.session_state:
            # Initialize with comprehensive default profile
            st.session_state.user_profile = self.user_profile_manager.create_user_profile({
                'name': '',
                'age': 25,
                'user_type': 'beginner',
                'language': 'english',
                'monthly_income': 30000,
                'currency': 'INR',
                'location': 'India'
            })
            # Ensure language is properly set
            self.language_support.set_language('english')

        # Initialize comprehensive session variables
        if 'chat_history' not in st.session_state:
            st.session_state.chat_history = []

        if 'dark_mode' not in st.session_state:
            st.session_state.dark_mode = False

        if 'voice_listening' not in st.session_state:
            st.session_state.voice_listening = False

        if 'voice_speaking' not in st.session_state:
            st.session_state.voice_speaking = False

        if 'security_authenticated' not in st.session_state:
            st.session_state.security_authenticated = False

        if 'user_data_encrypted' not in st.session_state:
            st.session_state.user_data_encrypted = True

        if 'ai_accuracy_enabled' not in st.session_state:
            st.session_state.ai_accuracy_enabled = True

        if 'rag_enabled' not in st.session_state:
            st.session_state.rag_enabled = True

    def load_user_data(self):
        """Load user data from secure storage"""
        try:
            if self.mongodb_manager:
                # Try to load from MongoDB if available
                try:
                    user_data = self.mongodb_manager.get_user_data(st.session_state.get('user_id', 'default'))
                    if user_data:
                        st.session_state.user_profile.update(user_data)
                        self.logger.info("‚úÖ User data loaded from MongoDB")
                except AttributeError:
                    # Method doesn't exist, use fallback
                    self.logger.info("üìÅ MongoDB method not available, using local storage")
            else:
                # Fallback to local storage
                self.logger.info("üìÅ Using local storage fallback")
        except Exception as e:
            self.logger.error(f"‚ùå Error loading user data: {e}")
    
    def apply_simple_css(self):
        """Apply clean, simple CSS"""
        theme_bg = "#1e1e1e" if st.session_state.dark_mode else "#ffffff"
        theme_text = "#ffffff" if st.session_state.dark_mode else "#333333"
        card_bg = "#2d2d2d" if st.session_state.dark_mode else "#f8f9fa"
        
        st.markdown(f"""
        <style>
        .stApp {{
            background-color: {theme_bg};
            color: {theme_text};
        }}
        
        .main-header {{
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            padding: 2rem;
            border-radius: 10px;
            color: white;
            text-align: center;
            margin-bottom: 2rem;
        }}
        
        .chat-container {{
            background: {card_bg};
            padding: 1rem;
            border-radius: 10px;
            margin: 1rem 0;
            border: 1px solid #ddd;
        }}
        
        .user-message {{
            background: #e3f2fd;
            padding: 1rem;
            border-radius: 10px;
            margin: 0.5rem 0;
            border-left: 4px solid #2196f3;
        }}
        
        .assistant-message {{
            background: #f3e5f5;
            padding: 1rem;
            border-radius: 10px;
            margin: 0.5rem 0;
            border-left: 4px solid #9c27b0;
        }}
        </style>
        """, unsafe_allow_html=True)
    
    def create_comprehensive_sidebar(self):
        """Create simple, working sidebar"""
        with st.sidebar:
            # User Profile Section
            current_language = st.session_state.user_profile.get('basic_info', {}).get('language', 'english')

            st.markdown("### üë§ User Profile")

            # Name input
            name = st.text_input(
                "Name" if current_language == 'english' else "‡Æ™‡ØÜ‡ÆØ‡Æ∞‡Øç",
                value=st.session_state.user_profile.get('basic_info', {}).get('name', ''),
                key="user_name"
            )
            if name != st.session_state.user_profile.get('basic_info', {}).get('name', ''):
                st.session_state.user_profile['basic_info']['name'] = name

            # Language selector
            language_options = {'english': 'English', 'tamil': '‡Æ§‡ÆÆ‡Æø‡Æ¥‡Øç'}
            selected_lang = st.selectbox(
                "üåê Language",
                options=list(language_options.keys()),
                format_func=lambda x: language_options[x],
                index=0 if current_language == 'english' else 1,
                key="language_selector"
            )

            if selected_lang != current_language:
                st.session_state.user_profile['basic_info']['language'] = selected_lang
                if self.language_support:
                    self.language_support.set_language(selected_lang)
                st.rerun()

            # User type selector
            user_type_text = "üë§ User Type" if current_language == 'english' else "üë§ ‡Æ™‡ÆØ‡Æ©‡Æ∞‡Øç ‡Æµ‡Æï‡Øà"
            user_types = {
                'beginner': 'Beginner' if current_language == 'english' else '‡ÆÜ‡Æ∞‡ÆÆ‡Øç‡Æ™‡Æ®‡Æø‡Æ≤‡Øà',
                'intermediate': 'Intermediate' if current_language == 'english' else '‡Æá‡Æü‡Øà‡Æ®‡Æø‡Æ≤‡Øà',
                'professional': 'Professional' if current_language == 'english' else '‡Æ§‡Øä‡Æ¥‡Æø‡Æ≤‡Øç‡ÆÆ‡ØÅ‡Æ±‡Øà',
                'student': 'Student' if current_language == 'english' else '‡ÆÆ‡Ææ‡Æ£‡Æµ‡Æ∞‡Øç'
            }

            current_user_type = st.session_state.user_profile.get('basic_info', {}).get('user_type', 'beginner')
            selected_user_type = st.selectbox(
                user_type_text,
                options=list(user_types.keys()),
                format_func=lambda x: user_types[x],
                index=list(user_types.keys()).index(current_user_type) if current_user_type in user_types else 0,
                key="user_type_selector"
            )

            if selected_user_type != current_user_type:
                st.session_state.user_profile['basic_info']['user_type'] = selected_user_type
                st.rerun()

            # Dark mode toggle
            dark_mode_text = "üåô Dark Mode" if current_language == 'english' else "üåô ‡Æá‡Æ∞‡ØÅ‡Æ£‡Øç‡Æü ‡Æ™‡ÆØ‡Æ©‡Øç‡ÆÆ‡ØÅ‡Æ±‡Øà"
            dark_mode = st.toggle(dark_mode_text, value=st.session_state.get('dark_mode', False), key="dark_mode_toggle")

            if dark_mode != st.session_state.get('dark_mode', False):
                st.session_state.dark_mode = dark_mode
                st.rerun()

            st.markdown("---")

            # Voice Interface Section
            st.markdown("### üé§ Voice Assistant" if current_language == 'english' else "### üé§ ‡Æï‡ØÅ‡Æ∞‡Æ≤‡Øç ‡Æâ‡Æ§‡Æµ‡Æø‡ÆØ‡Ææ‡Æ≥‡Æ∞‡Øç")

            col1, col2 = st.columns(2)
            with col1:
                if st.button("üéôÔ∏è Listen" if current_language == 'english' else "üéôÔ∏è ‡Æï‡Øá‡Æ≥‡ØÅ‡Æô‡Øç‡Æï‡Æ≥‡Øç", key="voice_listen"):
                    st.session_state.voice_listening = True

            with col2:
                if st.button("üîä Speak" if current_language == 'english' else "üîä ‡Æ™‡Øá‡Æö‡ØÅ‡Æô‡Øç‡Æï‡Æ≥‡Øç", key="voice_speak"):
                    st.session_state.voice_speaking = True

            st.markdown("---")

            # Simple Settings
            st.markdown("### ‚öôÔ∏è Settings" if current_language == 'english' else "### ‚öôÔ∏è ‡ÆÖ‡ÆÆ‡Øà‡Æ™‡Øç‡Æ™‡ØÅ‡Æï‡Æ≥‡Øç")

            # AI Features toggle
            ai_enabled = st.toggle(
                "AI Features" if current_language == 'english' else "AI ‡ÆÖ‡ÆÆ‡Øç‡Æö‡Æô‡Øç‡Æï‡Æ≥‡Øç",
                value=st.session_state.get('ai_accuracy_enabled', True),
                key="ai_toggle"
            )
            st.session_state.ai_accuracy_enabled = ai_enabled
            st.session_state.rag_enabled = ai_enabled



            # Currency selector (simple)
            st.markdown("### üí± Currency" if current_language == 'english' else "### üí± ‡Æ®‡Ææ‡Æ£‡ÆØ‡ÆÆ‡Øç")

            currency_options = ['INR', 'USD', 'EUR', 'GBP', 'JPY']
            current_currency = st.session_state.user_profile.get('basic_info', {}).get('currency', 'INR')

            selected_currency = st.selectbox(
                "Currency" if current_language == 'english' else "‡Æ®‡Ææ‡Æ£‡ÆØ‡ÆÆ‡Øç",
                options=currency_options,
                index=currency_options.index(current_currency) if current_currency in currency_options else 0,
                key="currency_selector"
            )

            if selected_currency != current_currency:
                st.session_state.user_profile['basic_info']['currency'] = selected_currency
                st.rerun()


    
    def create_header(self):
        """Create simple header"""
        current_language = st.session_state.user_profile.get('basic_info', {}).get('language', 'english')
        user_type = st.session_state.user_profile.get('basic_info', {}).get('user_type', 'beginner')

        title = "Personal Finance Assistant" if current_language == 'english' else "‡Æ§‡Æ©‡Æø‡Æ™‡Øç‡Æ™‡Æü‡Øç‡Æü ‡Æ®‡Æø‡Æ§‡Æø ‡Æâ‡Æ§‡Æµ‡Æø‡ÆØ‡Ææ‡Æ≥‡Æ∞‡Øç"
        subtitle = f"{user_type.title()} Dashboard" if current_language == 'english' else f"{user_type} ‡Æü‡Ææ‡Æ∑‡Øç‡Æ™‡Øã‡Æ∞‡Øç‡Æü‡ØÅ"

        st.markdown(f"""
        <div class="main-header">
            <h1>üí∞ {title}</h1>
            <p>{subtitle}</p>
        </div>
        """, unsafe_allow_html=True)
    
    def show_chat_interface(self):
        """Show comprehensive chat interface with all advanced features"""
        current_language = st.session_state.user_profile.get('basic_info', {}).get('language', 'english')
        user_type = st.session_state.user_profile.get('basic_info', {}).get('user_type', 'beginner')

        # Enhanced chat header
        welcome_text = "Personal Finance Assistant" if current_language == 'english' else "‡Æ§‡Æ©‡Æø‡Æ™‡Øç‡Æ™‡Æü‡Øç‡Æü ‡Æ®‡Æø‡Æ§‡Æø ‡Æâ‡Æ§‡Æµ‡Æø‡ÆØ‡Ææ‡Æ≥‡Æ∞‡Øç"
        st.markdown(f"### üí¨ {welcome_text}")

        # Show personalized greeting
        if st.session_state.user_profile.get('basic_info', {}).get('name'):
            try:
                if hasattr(self.user_profile_manager, 'get_personalized_greeting'):
                    greeting = self.user_profile_manager.get_personalized_greeting(
                        st.session_state.user_profile,
                        current_language
                    )
                    if hasattr(self.enhanced_ui, 'create_info_card'):
                        self.enhanced_ui.create_info_card("Welcome!", greeting, "üëã")
                    else:
                        st.info(f"üëã {greeting}")
                else:
                    name = st.session_state.user_profile.get('basic_info', {}).get('name', '')
                    welcome_msg = f"Welcome back, {name}!" if current_language == 'english' else f"‡ÆÆ‡ØÄ‡Æ£‡Øç‡Æü‡ØÅ‡ÆÆ‡Øç ‡Æµ‡Æ∞‡Æµ‡Øá‡Æ±‡Øç‡Æï‡Æø‡Æ±‡Øã‡ÆÆ‡Øç, {name}!"
                    st.info(f"üëã {welcome_msg}")
            except Exception as e:
                self.logger.error(f"Greeting error: {e}")
                st.info("üëã Welcome to your Personal Finance Assistant!")

        # Voice input processing
        if st.session_state.get('voice_listening', False):
            st.info("üéôÔ∏è Listening for voice input..." if current_language == 'english' else "üéôÔ∏è ‡Æï‡ØÅ‡Æ∞‡Æ≤‡Øç ‡Æâ‡Æ≥‡Øç‡Æ≥‡ØÄ‡Æü‡Øç‡Æü‡Øà‡Æï‡Øç ‡Æï‡Øá‡Æü‡Øç‡Æï‡Æø‡Æ±‡Øá‡Æ©‡Øç...")

            # Voice demo button
            if st.button("üé§ Demo Voice Input" if current_language == 'english' else "üé§ ‡Æï‡ØÅ‡Æ∞‡Æ≤‡Øç ‡Æâ‡Æ≥‡Øç‡Æ≥‡ØÄ‡Æü‡Øç‡Æü‡ØÅ ‡Æü‡ØÜ‡ÆÆ‡Øã"):
                sample_inputs = {
                    'english': ["How can I save money?", "What's my budget status?", "Help me with investments"],
                    'tamil': ["‡Æé‡Æ™‡Øç‡Æ™‡Æü‡Æø ‡Æ™‡Æ£‡ÆÆ‡Øç ‡Æö‡Øá‡ÆÆ‡Æø‡Æï‡Øç‡Æï‡Æ≤‡Ææ‡ÆÆ‡Øç?", "‡Æé‡Æ©‡Øç ‡Æ™‡Æü‡Øç‡Æú‡ØÜ‡Æü‡Øç ‡Æ®‡Æø‡Æ≤‡Øà ‡Æé‡Æ©‡Øç‡Æ©?", "‡ÆÆ‡ØÅ‡Æ§‡Æ≤‡ØÄ‡Æü‡Øç‡Æü‡Æø‡Æ≤‡Øç ‡Æâ‡Æ§‡Æµ‡ØÅ‡Æô‡Øç‡Æï‡Æ≥‡Øç"]
                }

                import random
                voice_input = random.choice(sample_inputs.get(current_language, sample_inputs['english']))
                st.success(f"üé§ Voice detected: {voice_input}")
                st.session_state.voice_listening = False

                # Process voice input
                self.process_comprehensive_user_message(voice_input)
                st.rerun()

        # Display enhanced chat history
        for message in st.session_state.chat_history[-10:]:  # Show last 10 for performance
            try:
                if hasattr(self.enhanced_ui, 'create_chat_message'):
                    if message['role'] == 'user':
                        self.enhanced_ui.create_chat_message(message['content'], is_user=True, language=current_language)
                    else:
                        self.enhanced_ui.create_chat_message(message['content'], is_user=False, language=current_language)
                else:
                    # Simple fallback chat display
                    if message['role'] == 'user':
                        st.markdown(f"""
                        <div class="user-message">
                            <strong>üôã You:</strong> {message['content']}
                        </div>
                        """, unsafe_allow_html=True)
                    else:
                        st.markdown(f"""
                        <div class="assistant-message">
                            <strong>ü§ñ Assistant:</strong> {message['content']}
                        </div>
                        """, unsafe_allow_html=True)
            except Exception as e:
                self.logger.error(f"Chat display error: {e}")
                # Ultra-simple fallback
                role_icon = "üôã" if message['role'] == 'user' else "ü§ñ"
                role_name = "You" if message['role'] == 'user' else "Assistant"
                st.markdown(f"**{role_icon} {role_name}:** {message['content']}")

        # Enhanced chat input
        try:
            if hasattr(self.language_support, 'get_text'):
                placeholder = self.language_support.get_text('ask_question')
            else:
                placeholder = "Ask about budgets, savings, investments..." if current_language == 'english' else "‡Æ™‡Æü‡Øç‡Æú‡ØÜ‡Æü‡Øç, ‡Æö‡Øá‡ÆÆ‡Æø‡Æ™‡Øç‡Æ™‡ØÅ, ‡ÆÆ‡ØÅ‡Æ§‡Æ≤‡ØÄ‡Æü‡ØÅ ‡Æ™‡Æ±‡Øç‡Æ±‡Æø ‡Æï‡Øá‡Æ≥‡ØÅ‡Æô‡Øç‡Æï‡Æ≥‡Øç..."
        except:
            placeholder = "Ask about budgets, savings, investments..." if current_language == 'english' else "‡Æ™‡Æü‡Øç‡Æú‡ØÜ‡Æü‡Øç, ‡Æö‡Øá‡ÆÆ‡Æø‡Æ™‡Øç‡Æ™‡ØÅ, ‡ÆÆ‡ØÅ‡Æ§‡Æ≤‡ØÄ‡Æü‡ØÅ ‡Æ™‡Æ±‡Øç‡Æ±‡Æø ‡Æï‡Øá‡Æ≥‡ØÅ‡Æô‡Øç‡Æï‡Æ≥‡Øç..."

        user_input = st.chat_input(placeholder)

        if user_input:
            self.process_comprehensive_user_message(user_input)
    
    def process_comprehensive_user_message(self, user_input: str):
        """Process user message with all advanced features"""
        current_language = st.session_state.user_profile.get('basic_info', {}).get('language', 'english')
        user_type = st.session_state.user_profile.get('basic_info', {}).get('user_type', 'beginner')

        # Add user message
        st.session_state.chat_history.append({
            "role": "user",
            "content": user_input,
            "timestamp": datetime.now()
        })

        # Generate comprehensive response
        response = self.generate_comprehensive_response(user_input, current_language, user_type)

        # Add assistant response
        st.session_state.chat_history.append({
            "role": "assistant",
            "content": response,
            "timestamp": datetime.now()
        })

        # Store last response for voice output
        st.session_state.last_response = response

        # Voice output if enabled
        if st.session_state.get('voice_speaking', False) and self.voice_interface:
            try:
                self.voice_interface.text_to_speech(response, language=current_language)
            except Exception as e:
                self.logger.error(f"Voice output failed: {e}")

        # Save to database if available
        if self.mongodb_manager:
            try:
                # Try different method names for compatibility
                if hasattr(self.mongodb_manager, 'save_chat_message'):
                    self.mongodb_manager.save_chat_message(
                        st.session_state.get('user_id', 'default'),
                        user_input,
                        response
                    )
                elif hasattr(self.mongodb_manager, 'store_chat_history'):
                    self.mongodb_manager.store_chat_history(
                        st.session_state.get('user_id', 'default'),
                        {'user': user_input, 'assistant': response}
                    )
            except Exception as e:
                self.logger.error(f"Database save failed: {e}")

        st.rerun()
    
    def generate_comprehensive_response(self, user_input: str, language: str, user_type: str) -> str:
        """Generate comprehensive response using available features"""
        try:
            # Set language for processing
            if self.language_support:
                self.language_support.set_language(language)

            # Process query with NLP if available
            query_analysis = None
            if self.nlp_processor:
                try:
                    query_analysis = self.nlp_processor.process_query(user_input, st.session_state.user_profile)
                except Exception as e:
                    self.logger.error(f"NLP processing failed: {e}")

            # Use AI accuracy and RAG if available and enabled
            if self.ai_rag and st.session_state.get('ai_accuracy_enabled', True):
                try:
                    # Get fact-checked response with sources
                    rag_response = self.ai_rag.get_verified_response(
                        user_input,
                        query_analysis,
                        language,
                        user_type
                    )

                    if rag_response and rag_response.get('success'):
                        response = rag_response['response']

                        # Add sources if available
                        if rag_response.get('sources'):
                            sources_text = "\n\nüìö Sources:" if language == 'english' else "\n\nüìö ‡ÆÜ‡Æ§‡Ææ‡Æ∞‡Æô‡Øç‡Æï‡Æ≥‡Øç:"
                            for i, source in enumerate(rag_response['sources'][:3], 1):
                                sources_text += f"\n{i}. {source}"
                            response += sources_text

                        # Add disclaimer
                        disclaimer = "\n\n‚ö†Ô∏è This is AI-generated advice. Please consult a financial advisor for personalized guidance." if language == 'english' else "\n\n‚ö†Ô∏è ‡Æá‡Æ§‡ØÅ AI ‡Æâ‡Æ∞‡ØÅ‡Æµ‡Ææ‡Æï‡Øç‡Æï‡Æø‡ÆØ ‡ÆÜ‡Æ≤‡Øã‡Æö‡Æ©‡Øà. ‡Æ§‡Æ©‡Æø‡Æ™‡Øç‡Æ™‡ÆØ‡Æ©‡Ææ‡Æï‡Øç‡Æï‡Æ™‡Øç‡Æ™‡Æü‡Øç‡Æü ‡Æµ‡Æ¥‡Æø‡Æï‡Ææ‡Æü‡Øç‡Æü‡ØÅ‡Æ§‡Æ≤‡ØÅ‡Æï‡Øç‡Æï‡ØÅ ‡Æ®‡Æø‡Æ§‡Æø ‡ÆÜ‡Æ≤‡Øã‡Æö‡Æï‡Æ∞‡Øà ‡ÆÖ‡Æ£‡ØÅ‡Æï‡Æµ‡ØÅ‡ÆÆ‡Øç."
                        response += disclaimer

                        return response
                except Exception as e:
                    self.logger.error(f"AI RAG processing failed: {e}")

            # Fallback to Watson integration if available
            if self.watson:
                try:
                    watson_response = self.watson.get_response(
                        user_input,
                        st.session_state.user_profile,
                        query_analysis
                    )

                    if watson_response:
                        # Translate response if needed and language support available
                        if language == 'tamil' and self.language_support:
                            try:
                                translated_response = self.language_support.translate_response(watson_response)
                                return translated_response
                            except:
                                pass  # Fall through to original response
                        return watson_response

                except Exception as e:
                    self.logger.error(f"Watson integration failed: {e}")

            # Enhanced fallback responses
            return self.generate_enhanced_fallback_response(user_input, language, user_type)

        except Exception as e:
            self.logger.error(f"Comprehensive response generation failed: {e}")
            return self.generate_simple_fallback_response(language)

    def generate_enhanced_fallback_response(self, user_input: str, language: str, user_type: str) -> str:
        """Generate enhanced fallback response"""
        user_input_lower = user_input.lower()

        # Budget-related queries
        if any(word in user_input_lower for word in ['budget', '‡Æ™‡Æü‡Øç‡Æú‡ØÜ‡Æü‡Øç', 'expense', '‡Æö‡ØÜ‡Æ≤‡Æµ‡ØÅ']):
            if language == 'english':
                if user_type == 'beginner':
                    return "üè¶ **Budget Planning for Beginners**\n\nStart with the 50/30/20 rule:\n‚Ä¢ 50% for needs (rent, food, utilities)\n‚Ä¢ 30% for wants (entertainment, dining out)\n‚Ä¢ 20% for savings and debt repayment\n\nTrack your expenses for a month to understand your spending patterns. Use apps like Mint or YNAB to get started!"
                else:
                    return "üè¶ **Advanced Budget Strategies**\n\nConsider zero-based budgeting or envelope method. Analyze your spending categories and optimize:\n‚Ä¢ Fixed costs: Negotiate bills, refinance loans\n‚Ä¢ Variable costs: Use cashback cards, bulk buying\n‚Ä¢ Investments: Automate transfers to investment accounts\n\nReview and adjust monthly based on your financial goals."
            else:
                if user_type == 'beginner':
                    return "üè¶ **‡ÆÜ‡Æ∞‡ÆÆ‡Øç‡Æ™‡Æ®‡Æø‡Æ≤‡Øà‡ÆØ‡Ææ‡Æ≥‡Æ∞‡Øç‡Æï‡Æ≥‡ØÅ‡Æï‡Øç‡Æï‡Ææ‡Æ© ‡Æ™‡Æü‡Øç‡Æú‡ØÜ‡Æü‡Øç ‡Æ§‡Æø‡Æü‡Øç‡Æü‡ÆÆ‡Æø‡Æü‡Æ≤‡Øç**\n\n50/30/20 ‡Æµ‡Æø‡Æ§‡Æø‡ÆØ‡ØÅ‡Æü‡Æ©‡Øç ‡Æ§‡Øä‡Æü‡Æô‡Øç‡Æï‡ØÅ‡Æô‡Øç‡Æï‡Æ≥‡Øç:\n‚Ä¢ 50% ‡Æ§‡Øá‡Æµ‡Øà‡Æï‡Æ≥‡ØÅ‡Æï‡Øç‡Æï‡ØÅ (‡Æµ‡Ææ‡Æü‡Æï‡Øà, ‡Æâ‡Æ£‡Æµ‡ØÅ, ‡Æ™‡ÆØ‡Æ©‡Øç‡Æ™‡Ææ‡Æü‡ØÅ‡Æï‡Æ≥‡Øç)\n‚Ä¢ 30% ‡Æµ‡Æø‡Æ∞‡ØÅ‡Æ™‡Øç‡Æ™‡Æô‡Øç‡Æï‡Æ≥‡ØÅ‡Æï‡Øç‡Æï‡ØÅ (‡Æ™‡Øä‡Æ¥‡ØÅ‡Æ§‡ØÅ‡Æ™‡Øã‡Æï‡Øç‡Æï‡ØÅ, ‡Æµ‡ØÜ‡Æ≥‡Æø‡ÆØ‡Æø‡Æ≤‡Øç ‡Æö‡Ææ‡Æ™‡Øç‡Æ™‡Æø‡Æü‡ØÅ‡Æ§‡Æ≤‡Øç)\n‚Ä¢ 20% ‡Æö‡Øá‡ÆÆ‡Æø‡Æ™‡Øç‡Æ™‡ØÅ ‡ÆÆ‡Æ±‡Øç‡Æ±‡ØÅ‡ÆÆ‡Øç ‡Æï‡Æü‡Æ©‡Øç ‡Æ§‡Æø‡Æ∞‡ØÅ‡Æ™‡Øç‡Æ™‡Æø‡Æö‡Øç ‡Æö‡ØÜ‡Æ≤‡ØÅ‡Æ§‡Øç‡Æ§‡ØÅ‡Æ§‡Æ≤‡Øç\n\n‡Æâ‡Æô‡Øç‡Æï‡Æ≥‡Øç ‡Æö‡ØÜ‡Æ≤‡Æµ‡ØÅ ‡ÆÆ‡ØÅ‡Æ±‡Øà‡Æï‡Æ≥‡Øà‡Æ™‡Øç ‡Æ™‡ØÅ‡Æ∞‡Æø‡Æ®‡Øç‡Æ§‡ØÅ‡Æï‡Øä‡Æ≥‡Øç‡Æ≥ ‡Æí‡Æ∞‡ØÅ ‡ÆÆ‡Ææ‡Æ§‡Æ§‡Øç‡Æ§‡Æø‡Æ±‡Øç‡Æï‡ØÅ ‡Æâ‡Æô‡Øç‡Æï‡Æ≥‡Øç ‡Æö‡ØÜ‡Æ≤‡Æµ‡ØÅ‡Æï‡Æ≥‡Øà‡Æï‡Øç ‡Æï‡Æ£‡Øç‡Æï‡Ææ‡Æ£‡Æø‡Æï‡Øç‡Æï‡Æµ‡ØÅ‡ÆÆ‡Øç!"
                else:
                    return "üè¶ **‡ÆÆ‡Øá‡ÆÆ‡Øç‡Æ™‡Æü‡Øç‡Æü ‡Æ™‡Æü‡Øç‡Æú‡ØÜ‡Æü‡Øç ‡Æâ‡Æ§‡Øç‡Æ§‡Æø‡Æï‡Æ≥‡Øç**\n\n‡Æ™‡ØÇ‡Æú‡Øç‡ÆØ ‡ÆÖ‡Æü‡Æø‡Æ™‡Øç‡Æ™‡Æü‡Øà ‡Æ™‡Æü‡Øç‡Æú‡ØÜ‡Æü‡Øç ‡ÆÖ‡Æ≤‡Øç‡Æ≤‡Æ§‡ØÅ ‡Æâ‡Æ±‡Øà ‡ÆÆ‡ØÅ‡Æ±‡Øà‡ÆØ‡Øà‡Æï‡Øç ‡Æï‡Æ∞‡ØÅ‡Æ§‡Øç‡Æ§‡Æø‡Æ≤‡Øç ‡Æï‡Øä‡Æ≥‡Øç‡Æ≥‡ØÅ‡Æô‡Øç‡Æï‡Æ≥‡Øç. ‡Æâ‡Æô‡Øç‡Æï‡Æ≥‡Øç ‡Æö‡ØÜ‡Æ≤‡Æµ‡ØÅ ‡Æµ‡Æï‡Øà‡Æï‡Æ≥‡Øà ‡Æ™‡Æï‡ØÅ‡Æ™‡Øç‡Æ™‡Ææ‡ÆØ‡Øç‡Æµ‡ØÅ ‡Æö‡ØÜ‡ÆØ‡Øç‡Æ§‡ØÅ ‡ÆÆ‡Øá‡ÆÆ‡Øç‡Æ™‡Æü‡ØÅ‡Æ§‡Øç‡Æ§‡ØÅ‡Æô‡Øç‡Æï‡Æ≥‡Øç:\n‚Ä¢ ‡Æ®‡Æø‡Æ≤‡Øà‡ÆØ‡Ææ‡Æ© ‡Æö‡ØÜ‡Æ≤‡Æµ‡ØÅ‡Æï‡Æ≥‡Øç: ‡Æ™‡Æø‡Æ≤‡Øç‡Æï‡Æ≥‡Øà ‡Æ™‡Øá‡Æ∞‡ÆÆ‡Øç ‡Æ™‡Øá‡Æö‡ØÅ‡Æô‡Øç‡Æï‡Æ≥‡Øç, ‡Æï‡Æü‡Æ©‡Øç‡Æï‡Æ≥‡Øà ‡ÆÆ‡Æ±‡ØÅ‡Æ®‡Æø‡Æ§‡Æø‡ÆØ‡Æ≥‡Æø‡Æï‡Øç‡Æï‡Æµ‡ØÅ‡ÆÆ‡Øç\n‚Ä¢ ‡ÆÆ‡Ææ‡Æ±‡Æø ‡Æö‡ØÜ‡Æ≤‡Æµ‡ØÅ‡Æï‡Æ≥‡Øç: ‡Æï‡Øá‡Æ∑‡Øç‡Æ™‡Øá‡Æï‡Øç ‡Æï‡Ææ‡Æ∞‡Øç‡Æü‡ØÅ‡Æï‡Æ≥‡Øç, ‡ÆÆ‡Øä‡Æ§‡Øç‡Æ§ ‡Æµ‡Ææ‡Æô‡Øç‡Æï‡ØÅ‡Æ§‡Æ≤‡Øç\n‚Ä¢ ‡ÆÆ‡ØÅ‡Æ§‡Æ≤‡ØÄ‡Æü‡ØÅ‡Æï‡Æ≥‡Øç: ‡ÆÆ‡ØÅ‡Æ§‡Æ≤‡ØÄ‡Æü‡Øç‡Æü‡ØÅ ‡Æï‡Æ£‡Æï‡Øç‡Æï‡ØÅ‡Æï‡Æ≥‡ØÅ‡Æï‡Øç‡Æï‡ØÅ ‡Æ§‡Ææ‡Æ©‡Æø‡ÆØ‡Æô‡Øç‡Æï‡ØÅ ‡Æ™‡Æ∞‡Æø‡ÆÆ‡Ææ‡Æ±‡Øç‡Æ±‡Æô‡Øç‡Æï‡Æ≥‡Øç"

        # Savings-related queries
        elif any(word in user_input_lower for word in ['save', 'saving', '‡Æö‡Øá‡ÆÆ‡Æø‡Æ™‡Øç‡Æ™‡ØÅ', '‡Æö‡Øá‡ÆÆ‡Æø‡Æï‡Øç‡Æï']):
            if language == 'english':
                return "üí∞ **Smart Savings Strategies**\n\n1. **Emergency Fund**: Build 6 months of expenses first\n2. **High-Yield Savings**: Use accounts with 4-6% interest\n3. **Automate Savings**: Set up automatic transfers\n4. **Reduce Expenses**: Cancel unused subscriptions, cook at home\n5. **Increase Income**: Side hustles, skill development\n\n**Pro Tip**: Pay yourself first - save before spending!"
            else:
                return "üí∞ **‡Æ™‡ØÅ‡Æ§‡Øç‡Æ§‡Æø‡Æö‡Ææ‡Æ≤‡Æø‡Æ§‡Øç‡Æ§‡Æ©‡ÆÆ‡Ææ‡Æ© ‡Æö‡Øá‡ÆÆ‡Æø‡Æ™‡Øç‡Æ™‡ØÅ ‡Æâ‡Æ§‡Øç‡Æ§‡Æø‡Æï‡Æ≥‡Øç**\n\n1. **‡ÆÖ‡Æµ‡Æö‡Æ∞‡Æï‡Ææ‡Æ≤ ‡Æ®‡Æø‡Æ§‡Æø**: ‡ÆÆ‡ØÅ‡Æ§‡Æ≤‡Æø‡Æ≤‡Øç 6 ‡ÆÆ‡Ææ‡Æ§ ‡Æö‡ØÜ‡Æ≤‡Æµ‡ØÅ‡Æï‡Æ≥‡Øà ‡Æâ‡Æ∞‡ØÅ‡Æµ‡Ææ‡Æï‡Øç‡Æï‡ØÅ‡Æô‡Øç‡Æï‡Æ≥‡Øç\n2. **‡ÆÖ‡Æ§‡Æø‡Æï ‡Æµ‡Æ∞‡ØÅ‡ÆÆ‡Ææ‡Æ© ‡Æö‡Øá‡ÆÆ‡Æø‡Æ™‡Øç‡Æ™‡ØÅ**: 4-6% ‡Æµ‡Æü‡Øç‡Æü‡Æø ‡Æï‡Øä‡Æ£‡Øç‡Æü ‡Æï‡Æ£‡Æï‡Øç‡Æï‡ØÅ‡Æï‡Æ≥‡Øà‡Æ™‡Øç ‡Æ™‡ÆØ‡Æ©‡Øç‡Æ™‡Æü‡ØÅ‡Æ§‡Øç‡Æ§‡ØÅ‡Æô‡Øç‡Æï‡Æ≥‡Øç\n3. **‡Æö‡Øá‡ÆÆ‡Æø‡Æ™‡Øç‡Æ™‡Øà ‡Æ§‡Ææ‡Æ©‡Æø‡ÆØ‡Æô‡Øç‡Æï‡ØÅ ‡Æö‡ØÜ‡ÆØ‡Øç‡ÆØ‡ØÅ‡Æô‡Øç‡Æï‡Æ≥‡Øç**: ‡Æ§‡Ææ‡Æ©‡Æø‡ÆØ‡Æô‡Øç‡Æï‡ØÅ ‡Æ™‡Æ∞‡Æø‡ÆÆ‡Ææ‡Æ±‡Øç‡Æ±‡Æô‡Øç‡Æï‡Æ≥‡Øà ‡ÆÖ‡ÆÆ‡Øà‡Æï‡Øç‡Æï‡Æµ‡ØÅ‡ÆÆ‡Øç\n4. **‡Æö‡ØÜ‡Æ≤‡Æµ‡ØÅ‡Æï‡Æ≥‡Øà‡Æï‡Øç ‡Æï‡ØÅ‡Æ±‡Øà‡Æï‡Øç‡Æï‡Æµ‡ØÅ‡ÆÆ‡Øç**: ‡Æ™‡ÆØ‡Æ©‡Øç‡Æ™‡Æü‡ØÅ‡Æ§‡Øç‡Æ§‡Ææ‡Æ§ ‡Æö‡Æ®‡Øç‡Æ§‡Ææ‡Æï‡Øç‡Æï‡Æ≥‡Øà ‡Æ∞‡Æ§‡Øç‡Æ§‡ØÅ ‡Æö‡ØÜ‡ÆØ‡Øç‡ÆØ‡ØÅ‡Æô‡Øç‡Æï‡Æ≥‡Øç, ‡Æµ‡ØÄ‡Æü‡Øç‡Æü‡Æø‡Æ≤‡Øç ‡Æö‡ÆÆ‡Øà‡Æï‡Øç‡Æï‡Æµ‡ØÅ‡ÆÆ‡Øç\n5. **‡Æµ‡Æ∞‡ØÅ‡ÆÆ‡Ææ‡Æ©‡Æ§‡Øç‡Æ§‡Øà ‡ÆÖ‡Æ§‡Æø‡Æï‡Æ∞‡Æø‡Æï‡Øç‡Æï‡Æµ‡ØÅ‡ÆÆ‡Øç**: ‡Æ™‡Æï‡Øç‡Æï ‡Æµ‡Øá‡Æ≤‡Øà‡Æï‡Æ≥‡Øç, ‡Æ§‡Æø‡Æ±‡Æ©‡Øç ‡ÆÆ‡Øá‡ÆÆ‡Øç‡Æ™‡Ææ‡Æü‡ØÅ"

        # Investment-related queries
        elif any(word in user_input_lower for word in ['invest', 'investment', '‡ÆÆ‡ØÅ‡Æ§‡Æ≤‡ØÄ‡Æü‡ØÅ', 'sip', 'mutual fund']):
            if language == 'english':
                return "üìà **Investment Guide**\n\n**For Beginners:**\n‚Ä¢ Start with SIPs in diversified equity funds\n‚Ä¢ Invest in PPF for tax benefits\n‚Ä¢ Consider index funds for low-cost investing\n\n**Risk Management:**\n‚Ä¢ Diversify across asset classes\n‚Ä¢ Don't put all money in one investment\n‚Ä¢ Review portfolio quarterly\n\n**Long-term Strategy:**\n‚Ä¢ Stay invested for 5+ years\n‚Ä¢ Don't panic during market downturns\n‚Ä¢ Increase SIP amount annually"
            else:
                return "üìà **‡ÆÆ‡ØÅ‡Æ§‡Æ≤‡ØÄ‡Æü‡Øç‡Æü‡ØÅ ‡Æµ‡Æ¥‡Æø‡Æï‡Ææ‡Æü‡Øç‡Æü‡Æø**\n\n**‡ÆÜ‡Æ∞‡ÆÆ‡Øç‡Æ™‡Æ®‡Æø‡Æ≤‡Øà‡ÆØ‡Ææ‡Æ≥‡Æ∞‡Øç‡Æï‡Æ≥‡ØÅ‡Æï‡Øç‡Æï‡ØÅ:**\n‚Ä¢ ‡Æ™‡Æ≤‡Øç‡Æµ‡Æï‡Øà‡Æ™‡Øç‡Æ™‡Æü‡ØÅ‡Æ§‡Øç‡Æ§‡Æ™‡Øç‡Æ™‡Æü‡Øç‡Æü ‡Æà‡Æï‡Øç‡Æµ‡Æø‡Æü‡Øç‡Æü‡Æø ‡ÆÉ‡Æ™‡Æ£‡Øç‡Æü‡ØÅ‡Æï‡Æ≥‡Æø‡Æ≤‡Øç SIP ‡Æï‡Æ≥‡ØÅ‡Æü‡Æ©‡Øç ‡Æ§‡Øä‡Æü‡Æô‡Øç‡Æï‡ØÅ‡Æô‡Øç‡Æï‡Æ≥‡Øç\n‚Ä¢ ‡Æµ‡Æ∞‡Æø ‡Æ®‡Æ©‡Øç‡ÆÆ‡Øà‡Æï‡Æ≥‡ØÅ‡Æï‡Øç‡Æï‡Ææ‡Æï PPF ‡Æá‡Æ≤‡Øç ‡ÆÆ‡ØÅ‡Æ§‡Æ≤‡ØÄ‡Æü‡ØÅ ‡Æö‡ØÜ‡ÆØ‡Øç‡ÆØ‡ØÅ‡Æô‡Øç‡Æï‡Æ≥‡Øç\n‚Ä¢ ‡Æï‡ØÅ‡Æ±‡Øà‡Æ®‡Øç‡Æ§ ‡Æö‡ØÜ‡Æ≤‡Æµ‡ØÅ ‡ÆÆ‡ØÅ‡Æ§‡Æ≤‡ØÄ‡Æü‡Øç‡Æü‡Æø‡Æ±‡Øç‡Æï‡ØÅ ‡Æá‡Æ£‡Øç‡Æü‡ØÜ‡Æï‡Øç‡Æ∏‡Øç ‡ÆÉ‡Æ™‡Æ£‡Øç‡Æü‡ØÅ‡Æï‡Æ≥‡Øà‡Æï‡Øç ‡Æï‡Æ∞‡ØÅ‡Æ§‡Øç‡Æ§‡Æø‡Æ≤‡Øç ‡Æï‡Øä‡Æ≥‡Øç‡Æ≥‡ØÅ‡Æô‡Øç‡Æï‡Æ≥‡Øç\n\n**‡Æ∞‡Æø‡Æ∏‡Øç‡Æï‡Øç ‡ÆÆ‡Øá‡Æ≤‡Ææ‡Æ£‡Øç‡ÆÆ‡Øà:**\n‚Ä¢ ‡Æö‡Øä‡Æ§‡Øç‡Æ§‡ØÅ ‡Æµ‡Æï‡Øà‡Æï‡Æ≥‡Æø‡Æ≤‡Øç ‡Æ™‡Æ≤‡Øç‡Æµ‡Æï‡Øà‡Æ™‡Øç‡Æ™‡Æü‡ØÅ‡Æ§‡Øç‡Æ§‡ØÅ‡Æô‡Øç‡Æï‡Æ≥‡Øç\n‚Ä¢ ‡Æé‡Æ≤‡Øç‡Æ≤‡Ææ ‡Æ™‡Æ£‡Æ§‡Øç‡Æ§‡Øà‡ÆØ‡ØÅ‡ÆÆ‡Øç ‡Æí‡Æ∞‡Øá ‡ÆÆ‡ØÅ‡Æ§‡Æ≤‡ØÄ‡Æü‡Øç‡Æü‡Æø‡Æ≤‡Øç ‡Æ™‡Øã‡Æü‡Ææ‡Æ§‡ØÄ‡Æ∞‡Øç‡Æï‡Æ≥‡Øç\n‚Ä¢ ‡Æï‡Ææ‡Æ≤‡Ææ‡Æ£‡Øç‡Æü‡ØÅ‡Æï‡Øç‡Æï‡ØÅ ‡Æí‡Æ∞‡ØÅ‡ÆÆ‡ØÅ‡Æ±‡Øà ‡Æ™‡Øã‡Æ∞‡Øç‡Æü‡Øç‡ÆÉ‡Æ™‡Øã‡Æ≤‡Æø‡ÆØ‡Øã‡Æµ‡Øà ‡ÆÆ‡Æ§‡Æø‡Æ™‡Øç‡Æ™‡Ææ‡ÆØ‡Øç‡Æµ‡ØÅ ‡Æö‡ØÜ‡ÆØ‡Øç‡ÆØ‡ØÅ‡Æô‡Øç‡Æï‡Æ≥‡Øç"

        else:
            if language == 'english':
                return f"üëã **Hello {user_type.title()}!**\n\nI'm your AI financial assistant. I can help you with:\n\nüí∞ **Budgeting & Expense Tracking**\nüìà **Investment Planning & SIPs**\nüè¶ **Savings Strategies**\nüí± **Currency Conversion**\nüìä **Financial Reports**\nüéØ **Goal-based Planning**\n\nWhat would you like to know about your finances today?"
            else:
                return f"üëã **‡Æµ‡Æ£‡Æï‡Øç‡Æï‡ÆÆ‡Øç {user_type}!**\n\n‡Æ®‡Ææ‡Æ©‡Øç ‡Æâ‡Æô‡Øç‡Æï‡Æ≥‡Øç AI ‡Æ®‡Æø‡Æ§‡Æø ‡Æâ‡Æ§‡Æµ‡Æø‡ÆØ‡Ææ‡Æ≥‡Æ∞‡Øç. ‡Æ®‡Ææ‡Æ©‡Øç ‡Æâ‡Æô‡Øç‡Æï‡Æ≥‡ØÅ‡Æï‡Øç‡Æï‡ØÅ ‡Æâ‡Æ§‡Æµ ‡ÆÆ‡ØÅ‡Æü‡Æø‡ÆØ‡ØÅ‡ÆÆ‡Øç:\n\nüí∞ **‡Æ™‡Æü‡Øç‡Æú‡ØÜ‡Æü‡Øç & ‡Æö‡ØÜ‡Æ≤‡Æµ‡ØÅ ‡Æï‡Æ£‡Øç‡Æï‡Ææ‡Æ£‡Æø‡Æ™‡Øç‡Æ™‡ØÅ**\nüìà **‡ÆÆ‡ØÅ‡Æ§‡Æ≤‡ØÄ‡Æü‡Øç‡Æü‡ØÅ ‡Æ§‡Æø‡Æü‡Øç‡Æü‡ÆÆ‡Æø‡Æü‡Æ≤‡Øç & SIP ‡Æï‡Æ≥‡Øç**\nüè¶ **‡Æö‡Øá‡ÆÆ‡Æø‡Æ™‡Øç‡Æ™‡ØÅ ‡Æâ‡Æ§‡Øç‡Æ§‡Æø‡Æï‡Æ≥‡Øç**\nüí± **‡Æ®‡Ææ‡Æ£‡ÆØ ‡ÆÆ‡Ææ‡Æ±‡Øç‡Æ±‡ÆÆ‡Øç**\nüìä **‡Æ®‡Æø‡Æ§‡Æø ‡ÆÖ‡Æ±‡Æø‡Æï‡Øç‡Æï‡Øà‡Æï‡Æ≥‡Øç**\nüéØ **‡Æá‡Æ≤‡Æï‡Øç‡Æï‡ØÅ ‡ÆÖ‡Æü‡Æø‡Æ™‡Øç‡Æ™‡Æü‡Øà‡ÆØ‡Æø‡Æ≤‡Ææ‡Æ© ‡Æ§‡Æø‡Æü‡Øç‡Æü‡ÆÆ‡Æø‡Æü‡Æ≤‡Øç**\n\n‡Æá‡Æ©‡Øç‡Æ±‡ØÅ ‡Æâ‡Æô‡Øç‡Æï‡Æ≥‡Øç ‡Æ®‡Æø‡Æ§‡Æø ‡Æ™‡Æ±‡Øç‡Æ±‡Æø ‡Æé‡Æ©‡Øç‡Æ© ‡Æ§‡ØÜ‡Æ∞‡Æø‡Æ®‡Øç‡Æ§‡ØÅ ‡Æï‡Øä‡Æ≥‡Øç‡Æ≥ ‡Æµ‡Æø‡Æ∞‡ØÅ‡ÆÆ‡Øç‡Æ™‡ØÅ‡Æï‡Æø‡Æ±‡ØÄ‡Æ∞‡Øç‡Æï‡Æ≥‡Øç?"

    def generate_simple_fallback_response(self, language: str) -> str:
        """Generate simple fallback response for errors"""
        if language == 'tamil':
            return "‡ÆÆ‡Æ©‡Øç‡Æ©‡Æø‡Æï‡Øç‡Æï‡Æµ‡ØÅ‡ÆÆ‡Øç, ‡Æí‡Æ∞‡ØÅ ‡Æ™‡Æø‡Æ¥‡Øà ‡Æè‡Æ±‡Øç‡Æ™‡Æü‡Øç‡Æü‡Æ§‡ØÅ. ‡ÆÆ‡ØÄ‡Æ£‡Øç‡Æü‡ØÅ‡ÆÆ‡Øç ‡ÆÆ‡ØÅ‡ÆØ‡Æ±‡Øç‡Æö‡Æø‡Æï‡Øç‡Æï‡Æµ‡ØÅ‡ÆÆ‡Øç."
        else:
            return "I apologize, but I encountered an issue. Please try again."
    
    def show_budget_calculator(self):
        """Simple budget calculator"""
        st.markdown("### üí∞ Budget Calculator" if st.session_state.language == 'english' else "### üí∞ ‡Æ™‡Æü‡Øç‡Æú‡ØÜ‡Æü‡Øç ‡Æï‡Æ£‡Æï‡Øç‡Æï‡ØÄ‡Æü‡Øç‡Æü‡Ææ‡Æ≥‡Æ∞‡Øç")

        col1, col2 = st.columns(2)

        with col1:
            st.markdown("**Income** / **‡Æµ‡Æ∞‡ØÅ‡ÆÆ‡Ææ‡Æ©‡ÆÆ‡Øç**")
            monthly_income = st.number_input("Monthly Income / ‡ÆÆ‡Ææ‡Æ§‡Ææ‡Æ®‡Øç‡Æ§‡Æø‡Æ∞ ‡Æµ‡Æ∞‡ØÅ‡ÆÆ‡Ææ‡Æ©‡ÆÆ‡Øç", min_value=0, value=50000, step=1000)
            other_income = st.number_input("Other Income / ‡Æ™‡Æø‡Æ± ‡Æµ‡Æ∞‡ØÅ‡ÆÆ‡Ææ‡Æ©‡ÆÆ‡Øç", min_value=0, value=0, step=500)

        with col2:
            st.markdown("**Expenses** / **‡Æö‡ØÜ‡Æ≤‡Æµ‡ØÅ‡Æï‡Æ≥‡Øç**")
            rent = st.number_input("Rent / ‡Æµ‡Ææ‡Æü‡Æï‡Øà", min_value=0, value=15000, step=1000)
            food = st.number_input("Food / ‡Æâ‡Æ£‡Æµ‡ØÅ", min_value=0, value=8000, step=500)
            transport = st.number_input("Transport / ‡Æ™‡Øã‡Æï‡Øç‡Æï‡ØÅ‡Æµ‡Æ∞‡Æ§‡Øç‡Æ§‡ØÅ", min_value=0, value=3000, step=500)
            utilities = st.number_input("Utilities / ‡Æ™‡ÆØ‡Æ©‡Øç‡Æ™‡Ææ‡Æü‡ØÅ‡Æï‡Æ≥‡Øç", min_value=0, value=2000, step=500)
            other_expenses = st.number_input("Other / ‡Æ™‡Æø‡Æ±", min_value=0, value=5000, step=500)

        total_income = monthly_income + other_income
        total_expenses = rent + food + transport + utilities + other_expenses
        savings = total_income - total_expenses

        st.markdown("---")

        col1, col2, col3 = st.columns(3)
        with col1:
            st.metric("Total Income / ‡ÆÆ‡Øä‡Æ§‡Øç‡Æ§ ‡Æµ‡Æ∞‡ØÅ‡ÆÆ‡Ææ‡Æ©‡ÆÆ‡Øç", f"‚Çπ{total_income:,}")
        with col2:
            st.metric("Total Expenses / ‡ÆÆ‡Øä‡Æ§‡Øç‡Æ§ ‡Æö‡ØÜ‡Æ≤‡Æµ‡ØÅ", f"‚Çπ{total_expenses:,}")
        with col3:
            st.metric("Savings / ‡Æö‡Øá‡ÆÆ‡Æø‡Æ™‡Øç‡Æ™‡ØÅ", f"‚Çπ{savings:,}", delta=f"{(savings/total_income*100):.1f}%" if total_income > 0 else "0%")

        if savings > 0:
            st.success("Great! You're saving money! / ‡Æö‡Æø‡Æ±‡Æ™‡Øç‡Æ™‡ØÅ! ‡Æ®‡ØÄ‡Æô‡Øç‡Æï‡Æ≥‡Øç ‡Æ™‡Æ£‡ÆÆ‡Øç ‡Æö‡Øá‡ÆÆ‡Æø‡Æï‡Øç‡Æï‡Æø‡Æ±‡ØÄ‡Æ∞‡Øç‡Æï‡Æ≥‡Øç!")
        elif savings == 0:
            st.warning("You're breaking even. Try to reduce expenses. / ‡Æ®‡ØÄ‡Æô‡Øç‡Æï‡Æ≥‡Øç ‡Æö‡ÆÆ‡Æ®‡Æø‡Æ≤‡Øà‡ÆØ‡Æø‡Æ≤‡Øç ‡Æá‡Æ∞‡ØÅ‡Æï‡Øç‡Æï‡Æø‡Æ±‡ØÄ‡Æ∞‡Øç‡Æï‡Æ≥‡Øç. ‡Æö‡ØÜ‡Æ≤‡Æµ‡ØÅ‡Æï‡Æ≥‡Øà‡Æï‡Øç ‡Æï‡ØÅ‡Æ±‡Øà‡Æï‡Øç‡Æï ‡ÆÆ‡ØÅ‡ÆØ‡Æ±‡Øç‡Æö‡Æø‡Æï‡Øç‡Æï‡Æµ‡ØÅ‡ÆÆ‡Øç.")
        else:
            st.error("You're spending more than you earn! / ‡Æ®‡ØÄ‡Æô‡Øç‡Æï‡Æ≥‡Øç ‡Æö‡ÆÆ‡Øç‡Æ™‡Ææ‡Æ§‡Æø‡Æ™‡Øç‡Æ™‡Æ§‡Øà ‡Æµ‡Æø‡Æü ‡ÆÖ‡Æ§‡Æø‡Æï‡ÆÆ‡Øç ‡Æö‡ØÜ‡Æ≤‡Æµ‡ØÅ ‡Æö‡ØÜ‡ÆØ‡Øç‡Æï‡Æø‡Æ±‡ØÄ‡Æ∞‡Øç‡Æï‡Æ≥‡Øç!")

    def show_investment_calculator(self):
        """Simple investment calculator"""
        st.markdown("### üìà Investment Calculator" if st.session_state.language == 'english' else "### üìà ‡ÆÆ‡ØÅ‡Æ§‡Æ≤‡ØÄ‡Æü‡Øç‡Æü‡ØÅ ‡Æï‡Æ£‡Æï‡Øç‡Æï‡ØÄ‡Æü‡Øç‡Æü‡Ææ‡Æ≥‡Æ∞‡Øç")

        col1, col2 = st.columns(2)

        with col1:
            principal = st.number_input("Initial Investment / ‡ÆÜ‡Æ∞‡ÆÆ‡Øç‡Æ™ ‡ÆÆ‡ØÅ‡Æ§‡Æ≤‡ØÄ‡Æü‡ØÅ", min_value=0, value=100000, step=10000)
            monthly_sip = st.number_input("Monthly SIP / ‡ÆÆ‡Ææ‡Æ§‡Ææ‡Æ®‡Øç‡Æ§‡Æø‡Æ∞ SIP", min_value=0, value=5000, step=500)

        with col2:
            annual_return = st.slider("Expected Annual Return % / ‡Æé‡Æ§‡Æø‡Æ∞‡Øç‡Æ™‡Ææ‡Æ∞‡Øç‡Æï‡Øç‡Æï‡Æ™‡Øç‡Æ™‡Æü‡ØÅ‡ÆÆ‡Øç ‡ÆÜ‡Æ£‡Øç‡Æü‡ØÅ ‡Æµ‡Æ∞‡ØÅ‡ÆÆ‡Ææ‡Æ©‡ÆÆ‡Øç %", 1, 20, 12)
            years = st.slider("Investment Period (Years) / ‡ÆÆ‡ØÅ‡Æ§‡Æ≤‡ØÄ‡Æü‡Øç‡Æü‡ØÅ ‡Æï‡Ææ‡Æ≤‡ÆÆ‡Øç (‡ÆÜ‡Æ£‡Øç‡Æü‡ØÅ‡Æï‡Æ≥‡Øç)", 1, 30, 10)

        # Calculate compound interest
        monthly_rate = annual_return / 100 / 12
        months = years * 12

        # Future value of lump sum
        fv_lumpsum = principal * (1 + annual_return/100) ** years

        # Future value of SIP
        if monthly_sip > 0:
            fv_sip = monthly_sip * (((1 + monthly_rate) ** months - 1) / monthly_rate)
        else:
            fv_sip = 0

        total_investment = principal + (monthly_sip * months)
        total_value = fv_lumpsum + fv_sip
        total_returns = total_value - total_investment

        st.markdown("---")

        col1, col2, col3 = st.columns(3)
        with col1:
            st.metric("Total Investment / ‡ÆÆ‡Øä‡Æ§‡Øç‡Æ§ ‡ÆÆ‡ØÅ‡Æ§‡Æ≤‡ØÄ‡Æü‡ØÅ", f"‚Çπ{total_investment:,.0f}")
        with col2:
            st.metric("Future Value / ‡Æé‡Æ§‡Æø‡Æ∞‡Øç‡Æï‡Ææ‡Æ≤ ‡ÆÆ‡Æ§‡Æø‡Æ™‡Øç‡Æ™‡ØÅ", f"‚Çπ{total_value:,.0f}")
        with col3:
            st.metric("Returns / ‡Æµ‡Æ∞‡ØÅ‡ÆÆ‡Ææ‡Æ©‡ÆÆ‡Øç", f"‚Çπ{total_returns:,.0f}", delta=f"{(total_returns/total_investment*100):.1f}%" if total_investment > 0 else "0%")

    def show_currency_converter(self):
        """Simple currency converter"""
        st.markdown("### üí± Currency Converter" if st.session_state.language == 'english' else "### üí± ‡Æ®‡Ææ‡Æ£‡ÆØ ‡ÆÆ‡Ææ‡Æ±‡Øç‡Æ±‡Æø")

        # Simple exchange rates (in real app, these would be fetched from API)
        exchange_rates = {
            'USD': 83.12,
            'EUR': 90.45,
            'GBP': 105.23,
            'JPY': 0.56,
            'AUD': 54.78,
            'CAD': 61.34,
            'SGD': 61.89
        }

        col1, col2, col3 = st.columns(3)

        with col1:
            amount = st.number_input("Amount / ‡Æ§‡Øä‡Æï‡Øà", min_value=0.0, value=1000.0, step=100.0)

        with col2:
            from_currency = st.selectbox("From / ‡Æá‡Æ∞‡ØÅ‡Æ®‡Øç‡Æ§‡ØÅ", ['INR'] + list(exchange_rates.keys()))

        with col3:
            to_currency = st.selectbox("To / ‡Æµ‡Æ∞‡Øà", ['INR'] + list(exchange_rates.keys()))

        if st.button("Convert / ‡ÆÆ‡Ææ‡Æ±‡Øç‡Æ±‡ØÅ"):
            if from_currency == to_currency:
                converted_amount = amount
            elif from_currency == 'INR':
                converted_amount = amount / exchange_rates[to_currency]
            elif to_currency == 'INR':
                converted_amount = amount * exchange_rates[from_currency]
            else:
                # Convert through INR
                inr_amount = amount * exchange_rates[from_currency]
                converted_amount = inr_amount / exchange_rates[to_currency]

            st.success(f"{amount:,.2f} {from_currency} = {converted_amount:,.2f} {to_currency}")

        st.markdown("---")
        st.markdown("**Exchange Rates (1 INR = ?) / ‡ÆÆ‡Ææ‡Æ±‡Øç‡Æ±‡ØÅ ‡Æµ‡Æø‡Æï‡Æø‡Æ§‡Æô‡Øç‡Æï‡Æ≥‡Øç**")

        rate_cols = st.columns(4)
        for i, (currency, rate) in enumerate(exchange_rates.items()):
            with rate_cols[i % 4]:
                st.metric(currency, f"{1/rate:.4f}")

    def show_savings_tips(self):
        """Show savings tips"""
        st.markdown("### üí° Savings Tips" if st.session_state.language == 'english' else "### üí° ‡Æö‡Øá‡ÆÆ‡Æø‡Æ™‡Øç‡Æ™‡ØÅ ‡Æï‡ØÅ‡Æ±‡Æø‡Æ™‡Øç‡Æ™‡ØÅ‡Æï‡Æ≥‡Øç")

        if st.session_state.language == 'english':
            tips = [
                "üè¶ **50/30/20 Rule**: 50% needs, 30% wants, 20% savings",
                "üì± **Track Expenses**: Use apps to monitor your spending",
                "üõí **Smart Shopping**: Compare prices and use coupons",
                "üçΩÔ∏è **Cook at Home**: Reduce dining out expenses",
                "üí° **Energy Saving**: Use LED bulbs and unplug devices",
                "üöó **Transportation**: Use public transport or carpool",
                "üìö **Emergency Fund**: Save 6 months of expenses",
                "üí≥ **Avoid Debt**: Pay credit cards in full each month"
            ]
        else:
            tips = [
                "üè¶ **50/30/20 ‡Æµ‡Æø‡Æ§‡Æø**: 50% ‡Æ§‡Øá‡Æµ‡Øà‡Æï‡Æ≥‡Øç, 30% ‡Æµ‡Æø‡Æ∞‡ØÅ‡Æ™‡Øç‡Æ™‡Æô‡Øç‡Æï‡Æ≥‡Øç, 20% ‡Æö‡Øá‡ÆÆ‡Æø‡Æ™‡Øç‡Æ™‡ØÅ",
                "üì± **‡Æö‡ØÜ‡Æ≤‡Æµ‡ØÅ‡Æï‡Æ≥‡Øà‡Æï‡Øç ‡Æï‡Æ£‡Øç‡Æï‡Ææ‡Æ£‡Æø‡Æï‡Øç‡Æï‡Æµ‡ØÅ‡ÆÆ‡Øç**: ‡Æâ‡Æô‡Øç‡Æï‡Æ≥‡Øç ‡Æö‡ØÜ‡Æ≤‡Æµ‡ØÅ‡Æï‡Æ≥‡Øà‡Æï‡Øç ‡Æï‡Æ£‡Øç‡Æï‡Ææ‡Æ£‡Æø‡Æï‡Øç‡Æï ‡ÆÜ‡Æ™‡Øç‡Æ∏‡Øà‡Æ™‡Øç ‡Æ™‡ÆØ‡Æ©‡Øç‡Æ™‡Æü‡ØÅ‡Æ§‡Øç‡Æ§‡Æµ‡ØÅ‡ÆÆ‡Øç",
                "üõí **‡Æ™‡ØÅ‡Æ§‡Øç‡Æ§‡Æø‡Æö‡Ææ‡Æ≤‡Æø‡Æ§‡Øç‡Æ§‡Æ©‡ÆÆ‡Ææ‡Æ© ‡Æ∑‡Ææ‡Æ™‡Øç‡Æ™‡Æø‡Æô‡Øç**: ‡Æµ‡Æø‡Æ≤‡Øà‡Æï‡Æ≥‡Øà ‡Æí‡Æ™‡Øç‡Æ™‡Æø‡Æü‡Øç‡Æü‡ØÅ ‡Æï‡ØÇ‡Æ™‡Øç‡Æ™‡Æ©‡Øç‡Æï‡Æ≥‡Øà‡Æ™‡Øç ‡Æ™‡ÆØ‡Æ©‡Øç‡Æ™‡Æü‡ØÅ‡Æ§‡Øç‡Æ§‡Æµ‡ØÅ‡ÆÆ‡Øç",
                "üçΩÔ∏è **‡Æµ‡ØÄ‡Æü‡Øç‡Æü‡Æø‡Æ≤‡Øç ‡Æö‡ÆÆ‡Øà‡Æï‡Øç‡Æï‡Æµ‡ØÅ‡ÆÆ‡Øç**: ‡Æµ‡ØÜ‡Æ≥‡Æø‡ÆØ‡Æø‡Æ≤‡Øç ‡Æö‡Ææ‡Æ™‡Øç‡Æ™‡Æø‡Æü‡ØÅ‡ÆÆ‡Øç ‡Æö‡ØÜ‡Æ≤‡Æµ‡ØÅ‡Æï‡Æ≥‡Øà‡Æï‡Øç ‡Æï‡ØÅ‡Æ±‡Øà‡Æï‡Øç‡Æï‡Æµ‡ØÅ‡ÆÆ‡Øç",
                "üí° **‡ÆÜ‡Æ±‡Øç‡Æ±‡Æ≤‡Øç ‡Æö‡Øá‡ÆÆ‡Æø‡Æ™‡Øç‡Æ™‡ØÅ**: LED ‡Æ™‡Æ≤‡Øç‡Æ™‡ØÅ‡Æï‡Æ≥‡Øà‡Æ™‡Øç ‡Æ™‡ÆØ‡Æ©‡Øç‡Æ™‡Æü‡ØÅ‡Æ§‡Øç‡Æ§‡Æø ‡Æö‡Ææ‡Æ§‡Æ©‡Æô‡Øç‡Æï‡Æ≥‡Øà ‡ÆÖ‡Æ©‡Øç‡Æ™‡Æø‡Æ≥‡Æï‡Øç ‡Æö‡ØÜ‡ÆØ‡Øç‡ÆØ‡Æµ‡ØÅ‡ÆÆ‡Øç",
                "üöó **‡Æ™‡Øã‡Æï‡Øç‡Æï‡ØÅ‡Æµ‡Æ∞‡Æ§‡Øç‡Æ§‡ØÅ**: ‡Æ™‡Øä‡Æ§‡ØÅ‡Æ™‡Øç ‡Æ™‡Øã‡Æï‡Øç‡Æï‡ØÅ‡Æµ‡Æ∞‡Æ§‡Øç‡Æ§‡ØÅ ‡ÆÖ‡Æ≤‡Øç‡Æ≤‡Æ§‡ØÅ ‡Æï‡Ææ‡Æ∞‡Øç‡Æ™‡ØÇ‡Æ≤‡Øà‡Æ™‡Øç ‡Æ™‡ÆØ‡Æ©‡Øç‡Æ™‡Æü‡ØÅ‡Æ§‡Øç‡Æ§‡Æµ‡ØÅ‡ÆÆ‡Øç",
                "üìö **‡ÆÖ‡Æµ‡Æö‡Æ∞‡Æï‡Ææ‡Æ≤ ‡Æ®‡Æø‡Æ§‡Æø**: 6 ‡ÆÆ‡Ææ‡Æ§ ‡Æö‡ØÜ‡Æ≤‡Æµ‡ØÅ‡Æï‡Æ≥‡Øà‡Æö‡Øç ‡Æö‡Øá‡ÆÆ‡Æø‡Æï‡Øç‡Æï‡Æµ‡ØÅ‡ÆÆ‡Øç",
                "üí≥ **‡Æï‡Æü‡Æ©‡Øà‡Æ§‡Øç ‡Æ§‡Æµ‡Æø‡Æ∞‡Øç‡Æï‡Øç‡Æï‡Æµ‡ØÅ‡ÆÆ‡Øç**: ‡Æï‡Æø‡Æ∞‡ØÜ‡Æü‡Æø‡Æü‡Øç ‡Æï‡Ææ‡Æ∞‡Øç‡Æü‡ØÅ‡Æï‡Æ≥‡Øà ‡Æí‡Æµ‡Øç‡Æµ‡Øä‡Æ∞‡ØÅ ‡ÆÆ‡Ææ‡Æ§‡ÆÆ‡ØÅ‡ÆÆ‡Øç ‡ÆÆ‡ØÅ‡Æ¥‡ØÅ‡ÆÆ‡Øà‡ÆØ‡Ææ‡Æï‡Æö‡Øç ‡Æö‡ØÜ‡Æ≤‡ØÅ‡Æ§‡Øç‡Æ§‡Æµ‡ØÅ‡ÆÆ‡Øç"
            ]

        for tip in tips:
            st.markdown(tip)
            st.markdown("")

    def show_comprehensive_dashboard(self):
        """Show comprehensive dashboard with analytics"""
        current_language = st.session_state.user_profile.get('basic_info', {}).get('language', 'english')

        st.markdown("### üìä Financial Dashboard" if current_language == 'english' else "### üìä ‡Æ®‡Æø‡Æ§‡Æø ‡Æü‡Ææ‡Æ∑‡Øç‡Æ™‡Øã‡Æ∞‡Øç‡Æü‡ØÅ")

        # Key metrics
        col1, col2, col3, col4 = st.columns(4)

        with col1:
            st.metric("Monthly Income", "‚Çπ50,000", delta="5%")
        with col2:
            st.metric("Total Expenses", "‚Çπ35,000", delta="-2%")
        with col3:
            st.metric("Savings Rate", "30%", delta="3%")
        with col4:
            st.metric("Investment Value", "‚Çπ2,50,000", delta="12%")

        # Charts
        col1, col2 = st.columns(2)

        with col1:
            # Expense breakdown
            expenses = {
                'Rent': 15000,
                'Food': 8000,
                'Transport': 3000,
                'Utilities': 2000,
                'Entertainment': 4000,
                'Others': 3000
            }

            fig = px.pie(
                values=list(expenses.values()),
                names=list(expenses.keys()),
                title="Expense Breakdown"
            )
            st.plotly_chart(fig, use_container_width=True)

        with col2:
            # Savings trend
            dates = pd.date_range(start='2024-01-01', end='2024-12-01', freq='M')
            savings = [12000, 15000, 13000, 18000, 16000, 20000, 22000, 19000, 25000, 23000, 27000, 30000]

            fig = px.line(
                x=dates,
                y=savings,
                title="Savings Trend",
                labels={'x': 'Month', 'y': 'Savings (‚Çπ)'}
            )
            st.plotly_chart(fig, use_container_width=True)

    def show_ai_insights(self):
        """Show AI-powered financial insights"""
        current_language = st.session_state.user_profile.get('basic_info', {}).get('language', 'english')

        st.markdown("### üß† AI Financial Insights" if current_language == 'english' else "### üß† AI ‡Æ®‡Æø‡Æ§‡Æø ‡Æ®‡ØÅ‡Æ£‡Øç‡Æ£‡Æ±‡Æø‡Æµ‡ØÅ")

        if self.ai_rag and st.session_state.ai_accuracy_enabled:
            # AI-powered insights
            insights = [
                {
                    'title': 'Spending Pattern Alert' if current_language == 'english' else '‡Æö‡ØÜ‡Æ≤‡Æµ‡ØÅ ‡ÆÆ‡ØÅ‡Æ±‡Øà ‡Æé‡Æö‡Øç‡Æö‡Æ∞‡Æø‡Æï‡Øç‡Æï‡Øà',
                    'message': 'Your dining out expenses increased by 25% this month. Consider meal planning to save ‚Çπ3,000.' if current_language == 'english' else '‡Æá‡Æ®‡Øç‡Æ§ ‡ÆÆ‡Ææ‡Æ§‡ÆÆ‡Øç ‡Æâ‡Æô‡Øç‡Æï‡Æ≥‡Øç ‡Æµ‡ØÜ‡Æ≥‡Æø‡ÆØ‡Æø‡Æ≤‡Øç ‡Æö‡Ææ‡Æ™‡Øç‡Æ™‡Æø‡Æü‡ØÅ‡ÆÆ‡Øç ‡Æö‡ØÜ‡Æ≤‡Æµ‡ØÅ 25% ‡ÆÖ‡Æ§‡Æø‡Æï‡Æ∞‡Æø‡Æ§‡Øç‡Æ§‡ØÅ‡Æ≥‡Øç‡Æ≥‡Æ§‡ØÅ. ‚Çπ3,000 ‡Æö‡Øá‡ÆÆ‡Æø‡Æï‡Øç‡Æï ‡Æâ‡Æ£‡Æµ‡ØÅ ‡Æ§‡Æø‡Æü‡Øç‡Æü‡ÆÆ‡Æø‡Æü‡Æ≤‡Øà‡Æï‡Øç ‡Æï‡Æ∞‡ØÅ‡Æ§‡Øç‡Æ§‡Æø‡Æ≤‡Øç ‡Æï‡Øä‡Æ≥‡Øç‡Æ≥‡ØÅ‡Æô‡Øç‡Æï‡Æ≥‡Øç.',
                    'type': 'warning'
                },
                {
                    'title': 'Investment Opportunity' if current_language == 'english' else '‡ÆÆ‡ØÅ‡Æ§‡Æ≤‡ØÄ‡Æü‡Øç‡Æü‡ØÅ ‡Æµ‡Ææ‡ÆØ‡Øç‡Æ™‡Øç‡Æ™‡ØÅ',
                    'message': 'Based on your risk profile, consider increasing SIP by ‚Çπ2,000 for better long-term returns.' if current_language == 'english' else '‡Æâ‡Æô‡Øç‡Æï‡Æ≥‡Øç ‡Æ∞‡Æø‡Æ∏‡Øç‡Æï‡Øç ‡Æö‡ØÅ‡ÆØ‡Æµ‡Æø‡Æµ‡Æ∞‡Æ§‡Øç‡Æ§‡Æø‡Æ©‡Øç ‡ÆÖ‡Æü‡Æø‡Æ™‡Øç‡Æ™‡Æü‡Øà‡ÆØ‡Æø‡Æ≤‡Øç, ‡Æö‡Æø‡Æ±‡Æ®‡Øç‡Æ§ ‡Æ®‡ØÄ‡Æ£‡Øç‡Æü ‡Æï‡Ææ‡Æ≤ ‡Æµ‡Æ∞‡ØÅ‡ÆÆ‡Ææ‡Æ©‡Æ§‡Øç‡Æ§‡Æø‡Æ±‡Øç‡Æï‡Ææ‡Æï SIP ‡Æê ‚Çπ2,000 ‡ÆÖ‡Æ§‡Æø‡Æï‡Æ∞‡Æø‡Æï‡Øç‡Æï‡Æµ‡ØÅ‡ÆÆ‡Øç.',
                    'type': 'success'
                },
                {
                    'title': 'Tax Saving Reminder' if current_language == 'english' else '‡Æµ‡Æ∞‡Æø ‡Æö‡Øá‡ÆÆ‡Æø‡Æ™‡Øç‡Æ™‡ØÅ ‡Æ®‡Æø‡Æ©‡Øà‡Æµ‡ØÇ‡Æü‡Øç‡Æü‡Æ≤‡Øç',
                    'message': 'You can save ‚Çπ15,600 in taxes by investing ‚Çπ52,000 more in ELSS funds before March 31st.' if current_language == 'english' else '‡ÆÆ‡Ææ‡Æ∞‡Øç‡Æö‡Øç 31‡Æï‡Øç‡Æï‡ØÅ ‡ÆÆ‡ØÅ‡Æ©‡Øç ELSS ‡ÆÉ‡Æ™‡Æ£‡Øç‡Æü‡ØÅ‡Æï‡Æ≥‡Æø‡Æ≤‡Øç ‚Çπ52,000 ‡ÆÖ‡Æ§‡Æø‡Æï‡ÆÆ‡Øç ‡ÆÆ‡ØÅ‡Æ§‡Æ≤‡ØÄ‡Æü‡ØÅ ‡Æö‡ØÜ‡ÆØ‡Øç‡Æµ‡Æ§‡Æ©‡Øç ‡ÆÆ‡ØÇ‡Æ≤‡ÆÆ‡Øç ‡Æµ‡Æ∞‡Æø‡ÆØ‡Æø‡Æ≤‡Øç ‚Çπ15,600 ‡Æö‡Øá‡ÆÆ‡Æø‡Æï‡Øç‡Æï‡Æ≤‡Ææ‡ÆÆ‡Øç.',
                    'type': 'info'
                }
            ]

            for insight in insights:
                if insight['type'] == 'warning':
                    st.warning(f"‚ö†Ô∏è **{insight['title']}**\n\n{insight['message']}")
                elif insight['type'] == 'success':
                    st.success(f"üí° **{insight['title']}**\n\n{insight['message']}")
                else:
                    st.info(f"‚ÑπÔ∏è **{insight['title']}**\n\n{insight['message']}")
        else:
            st.info("Enable AI Accuracy in sidebar for personalized insights" if current_language == 'english' else "‡Æ§‡Æ©‡Æø‡Æ™‡Øç‡Æ™‡ÆØ‡Æ©‡Ææ‡Æï‡Øç‡Æï‡Æ™‡Øç‡Æ™‡Æü‡Øç‡Æü ‡Æ®‡ØÅ‡Æ£‡Øç‡Æ£‡Æ±‡Æø‡Æµ‡ØÅ‡Æï‡Æ≥‡ØÅ‡Æï‡Øç‡Æï‡ØÅ ‡Æ™‡Æï‡Øç‡Æï‡Æ™‡Øç‡Æ™‡Æü‡Øç‡Æü‡Æø‡ÆØ‡Æø‡Æ≤‡Øç AI ‡Æ§‡ØÅ‡Æ≤‡Øç‡Æ≤‡Æø‡ÆØ‡Æ§‡Øç‡Æ§‡Øà ‡Æá‡ÆØ‡Æï‡Øç‡Æï‡Æµ‡ØÅ‡ÆÆ‡Øç")

    def show_reports_analytics(self):
        """Show comprehensive reports and analytics"""
        current_language = st.session_state.user_profile.get('basic_info', {}).get('language', 'english')

        st.markdown("### üìà Reports & Analytics" if current_language == 'english' else "### üìà ‡ÆÖ‡Æ±‡Æø‡Æï‡Øç‡Æï‡Øà‡Æï‡Æ≥‡Øç & ‡Æ™‡Æï‡ØÅ‡Æ™‡Øç‡Æ™‡Ææ‡ÆØ‡Øç‡Æµ‡ØÅ")

        # Report generation
        col1, col2, col3 = st.columns(3)

        with col1:
            if st.button("üìä Monthly Report" if current_language == 'english' else "üìä ‡ÆÆ‡Ææ‡Æ§‡Ææ‡Æ®‡Øç‡Æ§‡Æø‡Æ∞ ‡ÆÖ‡Æ±‡Æø‡Æï‡Øç‡Æï‡Øà"):
                if self.pdf_generator:
                    try:
                        # Generate monthly report
                        report_data = {
                            'user_profile': st.session_state.user_profile,
                            'period': 'monthly',
                            'data': {
                                'income': 50000,
                                'expenses': 35000,
                                'savings': 15000,
                                'investments': 250000
                            }
                        }

                        pdf_buffer = self.pdf_generator.generate_monthly_report(report_data)

                        # Create download link
                        b64 = base64.b64encode(pdf_buffer.getvalue()).decode()
                        href = f'<a href="data:application/pdf;base64,{b64}" download="monthly_report.pdf">Download Report</a>'
                        st.markdown(href, unsafe_allow_html=True)
                        st.success("Report generated!" if current_language == 'english' else "‡ÆÖ‡Æ±‡Æø‡Æï‡Øç‡Æï‡Øà ‡Æâ‡Æ∞‡ØÅ‡Æµ‡Ææ‡Æï‡Øç‡Æï‡Æ™‡Øç‡Æ™‡Æü‡Øç‡Æü‡Æ§‡ØÅ!")

                    except Exception as e:
                        st.error(f"Report generation failed: {e}")
                else:
                    st.warning("PDF generator not available")

        with col2:
            if st.button("üìã Tax Report" if current_language == 'english' else "üìã ‡Æµ‡Æ∞‡Æø ‡ÆÖ‡Æ±‡Æø‡Æï‡Øç‡Æï‡Øà"):
                st.info("Tax report generation coming soon!" if current_language == 'english' else "‡Æµ‡Æ∞‡Æø ‡ÆÖ‡Æ±‡Æø‡Æï‡Øç‡Æï‡Øà ‡Æâ‡Æ∞‡ØÅ‡Æµ‡Ææ‡Æï‡Øç‡Æï‡ÆÆ‡Øç ‡Æµ‡Æø‡Æ∞‡Øà‡Æµ‡Æø‡Æ≤‡Øç!")

        with col3:
            if st.button("üíº Investment Report" if current_language == 'english' else "üíº ‡ÆÆ‡ØÅ‡Æ§‡Æ≤‡ØÄ‡Æü‡Øç‡Æü‡ØÅ ‡ÆÖ‡Æ±‡Æø‡Æï‡Øç‡Æï‡Øà"):
                st.info("Investment report generation coming soon!" if current_language == 'english' else "‡ÆÆ‡ØÅ‡Æ§‡Æ≤‡ØÄ‡Æü‡Øç‡Æü‡ØÅ ‡ÆÖ‡Æ±‡Æø‡Æï‡Øç‡Æï‡Øà ‡Æâ‡Æ∞‡ØÅ‡Æµ‡Ææ‡Æï‡Øç‡Æï‡ÆÆ‡Øç ‡Æµ‡Æø‡Æ∞‡Øà‡Æµ‡Æø‡Æ≤‡Øç!")

    def run(self):
        """Run the comprehensive app"""
        self.setup_page_config()
        self.setup_session_state()
        self.apply_simple_css()

        # Get current language and dark mode
        current_language = st.session_state.user_profile.get('basic_info', {}).get('language', 'english')
        dark_mode = st.session_state.get('dark_mode', False)

        # Force language setting and debug
        self.language_support.set_language(current_language)

        # Setup enhanced CSS
        try:
            if hasattr(self.enhanced_ui, 'setup_custom_css'):
                self.enhanced_ui.setup_custom_css(dark_mode)
            else:
                # Use the simple CSS from this class
                self.apply_simple_css()
        except Exception as e:
            self.logger.error(f"CSS setup error: {e}")
            # Fallback to simple CSS
            self.apply_simple_css()

        # Create comprehensive sidebar
        self.create_comprehensive_sidebar()

        # Create header
        self.create_header()

        # Create comprehensive tabs
        tab_names = [
            "üí¨ Chat", "üìä Dashboard", "üí∞ Budget", "üìà Investment",
            "üí± Currency", "üß† AI Insights", "üìà Reports", "üí° Tips"
        ]

        if current_language == 'tamil':
            tab_names = [
                "üí¨ ‡ÆÖ‡Æ∞‡Æü‡Øç‡Æü‡Øà", "üìä ‡Æü‡Ææ‡Æ∑‡Øç‡Æ™‡Øã‡Æ∞‡Øç‡Æü‡ØÅ", "üí∞ ‡Æ™‡Æü‡Øç‡Æú‡ØÜ‡Æü‡Øç", "üìà ‡ÆÆ‡ØÅ‡Æ§‡Æ≤‡ØÄ‡Æü‡ØÅ",
                "üí± ‡Æ®‡Ææ‡Æ£‡ÆØ‡ÆÆ‡Øç", "üß† AI ‡Æ®‡ØÅ‡Æ£‡Øç‡Æ£‡Æ±‡Æø‡Æµ‡ØÅ", "üìà ‡ÆÖ‡Æ±‡Æø‡Æï‡Øç‡Æï‡Øà‡Æï‡Æ≥‡Øç", "üí° ‡Æï‡ØÅ‡Æ±‡Æø‡Æ™‡Øç‡Æ™‡ØÅ‡Æï‡Æ≥‡Øç"
            ]

        tabs = st.tabs(tab_names)

        with tabs[0]:
            self.show_chat_interface()

        with tabs[1]:
            self.show_comprehensive_dashboard()

        with tabs[2]:
            self.show_budget_calculator()

        with tabs[3]:
            self.show_investment_calculator()

        with tabs[4]:
            self.show_currency_converter()

        with tabs[5]:
            self.show_ai_insights()

        with tabs[6]:
            self.show_reports_analytics()

        with tabs[7]:
            self.show_savings_tips()

if __name__ == "__main__":
    app = ComprehensiveFinanceApp()
    app.run()
