"""
Enhanced User Profile Manager for Personal Finance Chatbot
Supports multiple user types with personalized experiences
"""

from typing import Dict, List, Optional
import json
import os
from datetime import datetime

class UserProfileManager:
    """
    Manages user profiles with enhanced categorization and personalization
    """
    
    def __init__(self):
        self.user_types = {
            'student': {
                'description': 'College/University students managing limited budgets',
                'focus_areas': ['budget_basics', 'savings_goals', 'part_time_income', 'education_expenses'],
                'default_goals': ['Emergency fund', 'Education expenses', 'Entertainment budget'],
                'recommended_savings_rate': 0.15,  # 15%
                'priority_categories': ['education', 'food', 'transportation', 'entertainment']
            },
            'professional': {
                'description': 'Working professionals with regular income',
                'focus_areas': ['investment_planning', 'tax_optimization', 'retirement_planning', 'wealth_building'],
                'default_goals': ['Emergency fund', 'Retirement planning', 'Investment portfolio'],
                'recommended_savings_rate': 0.20,  # 20%
                'priority_categories': ['housing', 'transportation', 'healthcare', 'investments']
            },
            'beginner': {
                'description': 'New to personal finance management',
                'focus_areas': ['financial_literacy', 'basic_budgeting', 'savings_habits', 'debt_management'],
                'default_goals': ['Build emergency fund', 'Create first budget', 'Understand investments'],
                'recommended_savings_rate': 0.10,  # 10%
                'priority_categories': ['necessities', 'debt_payment', 'emergency_fund', 'learning']
            },
            'intermediate': {
                'description': 'Some experience with financial planning',
                'focus_areas': ['advanced_budgeting', 'investment_diversification', 'tax_planning', 'goal_optimization'],
                'default_goals': ['Optimize investment portfolio', 'Tax-efficient planning', 'Advanced savings strategies'],
                'recommended_savings_rate': 0.25,  # 25%
                'priority_categories': ['investments', 'tax_planning', 'insurance', 'advanced_goals']
            }
        }
        
        self.experience_levels = {
            'beginner': {
                'explanation_style': 'detailed',
                'use_jargon': False,
                'provide_examples': True,
                'step_by_step': True
            },
            'intermediate': {
                'explanation_style': 'moderate',
                'use_jargon': True,
                'provide_examples': True,
                'step_by_step': False
            },
            'advanced': {
                'explanation_style': 'concise',
                'use_jargon': True,
                'provide_examples': False,
                'step_by_step': False
            }
        }
    
    def create_user_profile(self, user_data: Dict) -> Dict:
        """Create a comprehensive user profile"""
        user_type = user_data.get('user_type', 'beginner')
        
        profile = {
            'basic_info': {
                'name': user_data.get('name', ''),
                'age': user_data.get('age', 25),
                'user_type': user_type,
                'language': user_data.get('language', 'english'),
                'created_at': datetime.now().isoformat()
            },
            'financial_info': {
                'monthly_income': user_data.get('monthly_income', 0),
                'currency': user_data.get('currency', 'INR'),
                'employment_status': user_data.get('employment_status', 'employed'),
                'financial_goals': self.user_types[user_type]['default_goals'].copy()
            },
            'preferences': {
                'explanation_style': self._get_explanation_style(user_type),
                'focus_areas': self.user_types[user_type]['focus_areas'].copy(),
                'priority_categories': self.user_types[user_type]['priority_categories'].copy(),
                'recommended_savings_rate': self.user_types[user_type]['recommended_savings_rate']
            },
            'progress': {
                'onboarding_completed': False,
                'goals_set': False,
                'first_analysis_done': False,
                'data_uploaded': False
            }
        }
        
        return profile
    
    def _get_explanation_style(self, user_type: str) -> Dict:
        """Get explanation style based on user type"""
        if user_type in ['student', 'beginner']:
            return self.experience_levels['beginner']
        elif user_type == 'intermediate':
            return self.experience_levels['intermediate']
        else:  # professional
            return self.experience_levels['intermediate']  # Professionals usually want moderate detail
    
    def get_personalized_greeting(self, profile: Dict, language: str = 'english') -> str:
        """Get personalized greeting based on user profile"""
        user_type = profile.get('basic_info', {}).get('user_type', 'beginner')
        name = profile.get('basic_info', {}).get('name', '')
        
        greetings = {
            'english': {
                'student': f"Hi {name}! ЁЯОУ Ready to master your finances as a student? Let's make every rupee count!",
                'professional': f"Welcome {name}! ЁЯТ╝ Let's optimize your financial strategy and build wealth professionally.",
                'beginner': f"Hello {name}! ЁЯМЯ Don't worry, I'll guide you through personal finance step by step.",
                'intermediate': f"Hi {name}! ЁЯЪА Ready to take your financial planning to the next level?"
            },
            'tamil': {
                'student': f"ро╡рогроХрпНроХроорпН {name}! ЁЯОУ рооро╛рогро╡ро░ро╛роХ роЙроЩрпНроХро│рпН роиро┐родро┐ропрпИ роХро▒рпНро▒рпБроХрпНроХрпКро│рпНро│ родропро╛ро░ро╛? роТро╡рпНро╡рпКро░рпБ ро░рпВрокро╛ропрпИропрпБроорпН рокропройрпБро│рпНро│родро╛роХрпНроХрпБро╡рпЛроорпН!",
                'professional': f"ро╡ро░ро╡рпЗро▒рпНроХро┐ро▒рпЛроорпН {name}! ЁЯТ╝ роЙроЩрпНроХро│рпН роиро┐родро┐ роЙродрпНродро┐ропрпИ роорпЗроорпНрокроЯрпБродрпНродро┐ родрпКро┤ро┐ро▓рпНроорпБро▒рпИропро╛роХ роЪрпЖро▓рпНро╡родрпНродрпИ роЙро░рпБро╡ро╛роХрпНроХрпБро╡рпЛроорпН.",
                'beginner': f"ро╡рогроХрпНроХроорпН {name}! ЁЯМЯ роХро╡ро▓рпИрокрпНрокроЯ ро╡рпЗрогрпНроЯро╛роорпН, родройро┐рокрпНрокроЯрпНроЯ роиро┐родро┐ропрпИ рокроЯро┐рокрпНрокроЯро┐ропро╛роХ роХро▒рпНро▒рпБродрпНродро░рпБро╡рпЗройрпН.",
                'intermediate': f"ро╡рогроХрпНроХроорпН {name}! ЁЯЪА роЙроЩрпНроХро│рпН роиро┐родро┐ родро┐роЯрпНроЯрооро┐роЯро▓рпИ роЕроЯрпБродрпНрод роиро┐ро▓рпИроХрпНроХрпБ роХрпКрогрпНроЯрпБ роЪрпЖро▓рпНро▓ родропро╛ро░ро╛?"
            }
        }
        
        return greetings.get(language, greetings['english']).get(user_type, greetings[language]['beginner'])
    
    def get_suggested_topics(self, profile: Dict, language: str = 'english') -> List[str]:
        """Get suggested topics based on user profile"""
        user_type = profile.get('basic_info', {}).get('user_type', 'beginner')
        
        topics = {
            'english': {
                'student': [
                    "How to budget on a student income?",
                    "Best savings strategies for students",
                    "Managing education loan debt",
                    "Part-time income tax implications"
                ],
                'professional': [
                    "Investment portfolio optimization",
                    "Tax-saving investment options",
                    "Retirement planning strategies",
                    "Real estate investment advice"
                ],
                'beginner': [
                    "How to create my first budget?",
                    "What is an emergency fund?",
                    "Basic investment concepts",
                    "How to track expenses?"
                ],
                'intermediate': [
                    "Advanced budgeting techniques",
                    "Diversification strategies",
                    "Tax optimization methods",
                    "Goal-based financial planning"
                ]
            },
            'tamil': {
                'student': [
                    "рооро╛рогро╡ро░рпН ро╡ро░рпБрооро╛ройродрпНродро┐ро▓рпН роОрокрпНрокроЯро┐ рокроЯрпНроЬрпЖроЯрпН роЪрпЖропрпНро╡родрпБ?",
                    "рооро╛рогро╡ро░рпНроХро│рпБроХрпНроХро╛рой роЪро┐ро▒роирпНрод роЪрпЗрооро┐рокрпНрокрпБ ро╡ро┤ро┐роХро│рпН",
                    "роХро▓рпНро╡ро┐роХрпН роХроЯройрпН роиро┐ро░рпНро╡ро╛роХроорпН",
                    "рокроХрпБродро┐ роирпЗро░ ро╡ро░рпБрооро╛рой ро╡ро░ро┐ ро╡ро┐ро│рпИро╡рпБроХро│рпН"
                ],
                'professional': [
                    "роорпБродро▓рпАроЯрпНроЯрпБ рокрпЛро░рпНроЯрпНроГрокрпЛро▓ро┐ропрпЛ роорпЗроорпНрокро╛роЯрпБ",
                    "ро╡ро░ро┐ роЪрпЗрооро┐рокрпНрокрпБ роорпБродро▓рпАроЯрпНроЯрпБ ро╡ро┐ро░рпБрокрпНрокроЩрпНроХро│рпН",
                    "роУропрпНро╡рпВродро┐роп родро┐роЯрпНроЯрооро┐роЯро▓рпН роЙродрпНродро┐роХро│рпН",
                    "ро░ро┐ропро▓рпН роОро╕рпНроЯрпЗроЯрпН роорпБродро▓рпАроЯрпНроЯрпБ роЖро▓рпЛроЪройрпИ"
                ],
                'beginner': [
                    "роОройродрпБ роорпБродро▓рпН рокроЯрпНроЬрпЖроЯрпНроЯрпИ роОрокрпНрокроЯро┐ роЙро░рпБро╡ро╛роХрпНроХрпБро╡родрпБ?",
                    "роЕро╡роЪро░ роиро┐родро┐ роОройрпНро▒ро╛ро▓рпН роОройрпНрой?",
                    "роЕроЯро┐рокрпНрокроЯрпИ роорпБродро▓рпАроЯрпНроЯрпБ роХро░рпБродрпНродрпБроХро│рпН",
                    "роЪрпЖро▓ро╡рпБроХро│рпИ роОрокрпНрокроЯро┐ роХрогрпНроХро╛рогро┐рокрпНрокродрпБ?"
                ],
                'intermediate': [
                    "роорпЗроорпНрокроЯрпНроЯ рокроЯрпНроЬрпЖроЯрпНроЯро┐роЩрпН роирпБроЯрпНрокроЩрпНроХро│рпН",
                    "рокро▓рпНро╡роХрпИрокрпНрокроЯрпБродрпНродро▓рпН роЙродрпНродро┐роХро│рпН",
                    "ро╡ро░ро┐ роорпЗроорпНрокро╛роЯрпНроЯрпБ роорпБро▒рпИроХро│рпН",
                    "роЗро▓роХрпНроХрпБ роЕроЯро┐рокрпНрокроЯрпИропро┐ро▓ро╛рой роиро┐родро┐ родро┐роЯрпНроЯрооро┐роЯро▓рпН"
                ]
            }
        }
        
        return topics.get(language, topics['english']).get(user_type, topics[language]['beginner'])
    
    def get_user_type_info(self, user_type: str) -> Dict:
        """Get detailed information about a user type"""
        return self.user_types.get(user_type, self.user_types['beginner'])
    
    def update_progress(self, profile: Dict, milestone: str) -> Dict:
        """Update user progress"""
        if 'progress' not in profile:
            profile['progress'] = {}
        
        profile['progress'][milestone] = True
        profile['progress']['last_updated'] = datetime.now().isoformat()
        
        return profile
    
    def get_next_steps(self, profile: Dict, language: str = 'english') -> List[str]:
        """Get personalized next steps for the user"""
        progress = profile.get('progress', {})
        user_type = profile.get('basic_info', {}).get('user_type', 'beginner')
        
        next_steps = {
            'english': {
                'not_onboarded': [
                    "Complete your profile setup",
                    "Set your financial goals",
                    "Upload your transaction data"
                ],
                'onboarded_no_data': [
                    "Upload your transaction data for analysis",
                    "Explore budget analysis features",
                    "Set up smart alerts"
                ],
                'data_uploaded': [
                    "Review your budget analysis",
                    "Check smart financial alerts",
                    "Generate your first PDF report"
                ]
            },
            'tamil': {
                'not_onboarded': [
                    "роЙроЩрпНроХро│рпН роЪрпБропро╡ро┐ро╡ро░ роЕроорпИрокрпНрокрпИ роорпБроЯро┐роХрпНроХро╡рпБроорпН",
                    "роЙроЩрпНроХро│рпН роиро┐родро┐ роЗро▓роХрпНроХрпБроХро│рпИ роЕроорпИроХрпНроХро╡рпБроорпН",
                    "роЙроЩрпНроХро│рпН рокро░ро┐ро╡ро░рпНродрпНродройрпИ родро░ро╡рпИрокрпН рокродро┐ро╡рпЗро▒рпНро▒ро╡рпБроорпН"
                ],
                'onboarded_no_data': [
                    "рокроХрпБрокрпНрокро╛ропрпНро╡ро┐ро▒рпНроХро╛роХ роЙроЩрпНроХро│рпН рокро░ро┐ро╡ро░рпНродрпНродройрпИ родро░ро╡рпИрокрпН рокродро┐ро╡рпЗро▒рпНро▒ро╡рпБроорпН",
                    "рокроЯрпНроЬрпЖроЯрпН рокроХрпБрокрпНрокро╛ропрпНро╡рпБ роЕроорпНроЪроЩрпНроХро│рпИ роЖро░ро╛ропрпБроЩрпНроХро│рпН",
                    "ро╕рпНрооро╛ро░рпНроЯрпН роОроЪрпНроЪро░ро┐роХрпНроХрпИроХро│рпИ роЕроорпИроХрпНроХро╡рпБроорпН"
                ],
                'data_uploaded': [
                    "роЙроЩрпНроХро│рпН рокроЯрпНроЬрпЖроЯрпН рокроХрпБрокрпНрокро╛ропрпНро╡рпИ роородро┐рокрпНрокро╛ропрпНро╡рпБ роЪрпЖропрпНропрпБроЩрпНроХро│рпН",
                    "ро╕рпНрооро╛ро░рпНроЯрпН роиро┐родро┐ роОроЪрпНроЪро░ро┐роХрпНроХрпИроХро│рпИроЪрпН роЪро░ро┐рокро╛ро░рпНроХрпНроХро╡рпБроорпН",
                    "роЙроЩрпНроХро│рпН роорпБродро▓рпН PDF роЕро▒ро┐роХрпНроХрпИропрпИ роЙро░рпБро╡ро╛роХрпНроХро╡рпБроорпН"
                ]
            }
        }
        
        # Determine user's current stage
        if not progress.get('onboarding_completed', False):
            stage = 'not_onboarded'
        elif not progress.get('data_uploaded', False):
            stage = 'onboarded_no_data'
        else:
            stage = 'data_uploaded'
        
        return next_steps.get(language, next_steps['english']).get(stage, [])
