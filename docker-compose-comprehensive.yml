version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: jarvisfi_postgres
    environment:
      POSTGRES_DB: jarvisfi
      POSTGRES_USER: jarvisfi_user
      POSTGRES_PASSWORD: jarvisfi_password
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    networks:
      - jarvisfi_network

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: jarvisfi_redis
    command: redis-server --appendonly yes --requirepass redis_password
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - jarvisfi_network

  # MongoDB for Document Storage
  mongodb:
    image: mongo:7
    container_name: jarvisfi_mongodb
    environment:
      MONGO_INITDB_ROOT_USERNAME: mongo_user
      MONGO_INITDB_ROOT_PASSWORD: mongo_password
      MONGO_INITDB_DATABASE: jarvisfi_docs
    volumes:
      - mongodb_data:/data/db
    ports:
      - "27017:27017"
    networks:
      - jarvisfi_network

  # FastAPI Backend
  backend:
    build:
      context: ./api
      dockerfile: Dockerfile
    container_name: jarvisfi_backend
    environment:
      - DATABASE_URL=postgresql://jarvisfi_user:jarvisfi_password@postgres:5432/jarvisfi
      - REDIS_URL=redis://:redis_password@redis:6379/0
      - MONGODB_URL=mongodb://mongo_user:mongo_password@mongodb:27017/jarvisfi_docs
    volumes:
      - ./api:/app
      - ./shared:/app/shared
    ports:
      - "8000:8000"
    depends_on:
      - postgres
      - redis
      - mongodb
    networks:
      - jarvisfi_network
    command: uvicorn main:app --host 0.0.0.0 --port 8000 --reload

  # Streamlit Frontend
  frontend:
    build:
      context: ./ui
      dockerfile: Dockerfile
    container_name: jarvisfi_frontend
    environment:
      - BACKEND_URL=http://backend:8000
    volumes:
      - ./ui:/app
      - ./shared:/app/shared
    ports:
      - "8501:8501"
    depends_on:
      - backend
    networks:
      - jarvisfi_network
    command: streamlit run main_app.py --server.port=8501 --server.address=0.0.0.0

  # Celery Worker for Background Tasks
  celery_worker:
    build:
      context: ./api
      dockerfile: Dockerfile
    container_name: jarvisfi_celery_worker
    environment:
      - DATABASE_URL=postgresql://jarvisfi_user:jarvisfi_password@postgres:5432/jarvisfi
      - REDIS_URL=redis://:redis_password@redis:6379/0
      - MONGODB_URL=mongodb://mongo_user:mongo_password@mongodb:27017/jarvisfi_docs
    volumes:
      - ./api:/app
      - ./shared:/app/shared
    depends_on:
      - postgres
      - redis
      - mongodb
    networks:
      - jarvisfi_network
    command: celery -A celery_app worker --loglevel=info

  # Celery Beat for Scheduled Tasks
  celery_beat:
    build:
      context: ./api
      dockerfile: Dockerfile
    container_name: jarvisfi_celery_beat
    environment:
      - DATABASE_URL=postgresql://jarvisfi_user:jarvisfi_password@postgres:5432/jarvisfi
      - REDIS_URL=redis://:redis_password@redis:6379/0
    volumes:
      - ./api:/app
      - ./shared:/app/shared
    depends_on:
      - postgres
      - redis
    networks:
      - jarvisfi_network
    command: celery -A celery_app beat --loglevel=info

  # Flower for Celery Monitoring
  flower:
    build:
      context: ./api
      dockerfile: Dockerfile
    container_name: jarvisfi_flower
    environment:
      - REDIS_URL=redis://:redis_password@redis:6379/0
    ports:
      - "5555:5555"
    depends_on:
      - redis
    networks:
      - jarvisfi_network
    command: celery -A celery_app flower --port=5555

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: jarvisfi_nginx
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      - backend
      - frontend
    networks:
      - jarvisfi_network

volumes:
  postgres_data:
  redis_data:
  mongodb_data:

networks:
  jarvisfi_network:
    driver: bridge
